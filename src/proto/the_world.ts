// @ts-nocheck
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.5
 * source: the_world.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class ClientEvent extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]];
    constructor(data?: any[] | ({} & (({
        joinWorld?: JoinWorld;
        leaveWorld?: never;
        sendChat?: never;
        moveCharacter?: never;
        broadcast?: never;
        setFieldValue?: never;
        updateCollider?: never;
        createPlugin?: never;
        deletePlugin?: never;
        sendPluginMessage?: never;
        createIframePluginPortMapping?: never;
        deleteIframePluginPortMapping?: never;
        reqAboutPlugins?: never;
        updateAtlasTile?: never;
        deleteAtlasTile?: never;
        createIframeGameObjectInstantly?: never;
        deleteIframeGameObject?: never;
        deleteIframeGameObjectsAt?: never;
        reqIsPluginsOutdated?: never;
    } | {
        joinWorld?: never;
        leaveWorld?: LeaveWorld;
        sendChat?: never;
        moveCharacter?: never;
        broadcast?: never;
        setFieldValue?: never;
        updateCollider?: never;
        createPlugin?: never;
        deletePlugin?: never;
        sendPluginMessage?: never;
        createIframePluginPortMapping?: never;
        deleteIframePluginPortMapping?: never;
        reqAboutPlugins?: never;
        updateAtlasTile?: never;
        deleteAtlasTile?: never;
        createIframeGameObjectInstantly?: never;
        deleteIframeGameObject?: never;
        deleteIframeGameObjectsAt?: never;
        reqIsPluginsOutdated?: never;
    } | {
        joinWorld?: never;
        leaveWorld?: never;
        sendChat?: SendChat;
        moveCharacter?: never;
        broadcast?: never;
        setFieldValue?: never;
        updateCollider?: never;
        createPlugin?: never;
        deletePlugin?: never;
        sendPluginMessage?: never;
        createIframePluginPortMapping?: never;
        deleteIframePluginPortMapping?: never;
        reqAboutPlugins?: never;
        updateAtlasTile?: never;
        deleteAtlasTile?: never;
        createIframeGameObjectInstantly?: never;
        deleteIframeGameObject?: never;
        deleteIframeGameObjectsAt?: never;
        reqIsPluginsOutdated?: never;
    } | {
        joinWorld?: never;
        leaveWorld?: never;
        sendChat?: never;
        moveCharacter?: MoveCharacter;
        broadcast?: never;
        setFieldValue?: never;
        updateCollider?: never;
        createPlugin?: never;
        deletePlugin?: never;
        sendPluginMessage?: never;
        createIframePluginPortMapping?: never;
        deleteIframePluginPortMapping?: never;
        reqAboutPlugins?: never;
        updateAtlasTile?: never;
        deleteAtlasTile?: never;
        createIframeGameObjectInstantly?: never;
        deleteIframeGameObject?: never;
        deleteIframeGameObjectsAt?: never;
        reqIsPluginsOutdated?: never;
    } | {
        joinWorld?: never;
        leaveWorld?: never;
        sendChat?: never;
        moveCharacter?: never;
        broadcast?: Broadcast;
        setFieldValue?: never;
        updateCollider?: never;
        createPlugin?: never;
        deletePlugin?: never;
        sendPluginMessage?: never;
        createIframePluginPortMapping?: never;
        deleteIframePluginPortMapping?: never;
        reqAboutPlugins?: never;
        updateAtlasTile?: never;
        deleteAtlasTile?: never;
        createIframeGameObjectInstantly?: never;
        deleteIframeGameObject?: never;
        deleteIframeGameObjectsAt?: never;
        reqIsPluginsOutdated?: never;
    } | {
        joinWorld?: never;
        leaveWorld?: never;
        sendChat?: never;
        moveCharacter?: never;
        broadcast?: never;
        setFieldValue?: SetFieldValue;
        updateCollider?: never;
        createPlugin?: never;
        deletePlugin?: never;
        sendPluginMessage?: never;
        createIframePluginPortMapping?: never;
        deleteIframePluginPortMapping?: never;
        reqAboutPlugins?: never;
        updateAtlasTile?: never;
        deleteAtlasTile?: never;
        createIframeGameObjectInstantly?: never;
        deleteIframeGameObject?: never;
        deleteIframeGameObjectsAt?: never;
        reqIsPluginsOutdated?: never;
    } | {
        joinWorld?: never;
        leaveWorld?: never;
        sendChat?: never;
        moveCharacter?: never;
        broadcast?: never;
        setFieldValue?: never;
        updateCollider?: UpdateCollider;
        createPlugin?: never;
        deletePlugin?: never;
        sendPluginMessage?: never;
        createIframePluginPortMapping?: never;
        deleteIframePluginPortMapping?: never;
        reqAboutPlugins?: never;
        updateAtlasTile?: never;
        deleteAtlasTile?: never;
        createIframeGameObjectInstantly?: never;
        deleteIframeGameObject?: never;
        deleteIframeGameObjectsAt?: never;
        reqIsPluginsOutdated?: never;
    } | {
        joinWorld?: never;
        leaveWorld?: never;
        sendChat?: never;
        moveCharacter?: never;
        broadcast?: never;
        setFieldValue?: never;
        updateCollider?: never;
        createPlugin?: CreatePlugin;
        deletePlugin?: never;
        sendPluginMessage?: never;
        createIframePluginPortMapping?: never;
        deleteIframePluginPortMapping?: never;
        reqAboutPlugins?: never;
        updateAtlasTile?: never;
        deleteAtlasTile?: never;
        createIframeGameObjectInstantly?: never;
        deleteIframeGameObject?: never;
        deleteIframeGameObjectsAt?: never;
        reqIsPluginsOutdated?: never;
    } | {
        joinWorld?: never;
        leaveWorld?: never;
        sendChat?: never;
        moveCharacter?: never;
        broadcast?: never;
        setFieldValue?: never;
        updateCollider?: never;
        createPlugin?: never;
        deletePlugin?: DeletePlugin;
        sendPluginMessage?: never;
        createIframePluginPortMapping?: never;
        deleteIframePluginPortMapping?: never;
        reqAboutPlugins?: never;
        updateAtlasTile?: never;
        deleteAtlasTile?: never;
        createIframeGameObjectInstantly?: never;
        deleteIframeGameObject?: never;
        deleteIframeGameObjectsAt?: never;
        reqIsPluginsOutdated?: never;
    } | {
        joinWorld?: never;
        leaveWorld?: never;
        sendChat?: never;
        moveCharacter?: never;
        broadcast?: never;
        setFieldValue?: never;
        updateCollider?: never;
        createPlugin?: never;
        deletePlugin?: never;
        sendPluginMessage?: SendPluginMessage;
        createIframePluginPortMapping?: never;
        deleteIframePluginPortMapping?: never;
        reqAboutPlugins?: never;
        updateAtlasTile?: never;
        deleteAtlasTile?: never;
        createIframeGameObjectInstantly?: never;
        deleteIframeGameObject?: never;
        deleteIframeGameObjectsAt?: never;
        reqIsPluginsOutdated?: never;
    } | {
        joinWorld?: never;
        leaveWorld?: never;
        sendChat?: never;
        moveCharacter?: never;
        broadcast?: never;
        setFieldValue?: never;
        updateCollider?: never;
        createPlugin?: never;
        deletePlugin?: never;
        sendPluginMessage?: never;
        createIframePluginPortMapping?: CreateIframePluginPortMapping;
        deleteIframePluginPortMapping?: never;
        reqAboutPlugins?: never;
        updateAtlasTile?: never;
        deleteAtlasTile?: never;
        createIframeGameObjectInstantly?: never;
        deleteIframeGameObject?: never;
        deleteIframeGameObjectsAt?: never;
        reqIsPluginsOutdated?: never;
    } | {
        joinWorld?: never;
        leaveWorld?: never;
        sendChat?: never;
        moveCharacter?: never;
        broadcast?: never;
        setFieldValue?: never;
        updateCollider?: never;
        createPlugin?: never;
        deletePlugin?: never;
        sendPluginMessage?: never;
        createIframePluginPortMapping?: never;
        deleteIframePluginPortMapping?: DeleteIframePluginPortMapping;
        reqAboutPlugins?: never;
        updateAtlasTile?: never;
        deleteAtlasTile?: never;
        createIframeGameObjectInstantly?: never;
        deleteIframeGameObject?: never;
        deleteIframeGameObjectsAt?: never;
        reqIsPluginsOutdated?: never;
    } | {
        joinWorld?: never;
        leaveWorld?: never;
        sendChat?: never;
        moveCharacter?: never;
        broadcast?: never;
        setFieldValue?: never;
        updateCollider?: never;
        createPlugin?: never;
        deletePlugin?: never;
        sendPluginMessage?: never;
        createIframePluginPortMapping?: never;
        deleteIframePluginPortMapping?: never;
        reqAboutPlugins?: ReqAboutPlugins;
        updateAtlasTile?: never;
        deleteAtlasTile?: never;
        createIframeGameObjectInstantly?: never;
        deleteIframeGameObject?: never;
        deleteIframeGameObjectsAt?: never;
        reqIsPluginsOutdated?: never;
    } | {
        joinWorld?: never;
        leaveWorld?: never;
        sendChat?: never;
        moveCharacter?: never;
        broadcast?: never;
        setFieldValue?: never;
        updateCollider?: never;
        createPlugin?: never;
        deletePlugin?: never;
        sendPluginMessage?: never;
        createIframePluginPortMapping?: never;
        deleteIframePluginPortMapping?: never;
        reqAboutPlugins?: never;
        updateAtlasTile?: UpdateAtlasTile;
        deleteAtlasTile?: never;
        createIframeGameObjectInstantly?: never;
        deleteIframeGameObject?: never;
        deleteIframeGameObjectsAt?: never;
        reqIsPluginsOutdated?: never;
    } | {
        joinWorld?: never;
        leaveWorld?: never;
        sendChat?: never;
        moveCharacter?: never;
        broadcast?: never;
        setFieldValue?: never;
        updateCollider?: never;
        createPlugin?: never;
        deletePlugin?: never;
        sendPluginMessage?: never;
        createIframePluginPortMapping?: never;
        deleteIframePluginPortMapping?: never;
        reqAboutPlugins?: never;
        updateAtlasTile?: never;
        deleteAtlasTile?: DeleteAtlasTile;
        createIframeGameObjectInstantly?: never;
        deleteIframeGameObject?: never;
        deleteIframeGameObjectsAt?: never;
        reqIsPluginsOutdated?: never;
    } | {
        joinWorld?: never;
        leaveWorld?: never;
        sendChat?: never;
        moveCharacter?: never;
        broadcast?: never;
        setFieldValue?: never;
        updateCollider?: never;
        createPlugin?: never;
        deletePlugin?: never;
        sendPluginMessage?: never;
        createIframePluginPortMapping?: never;
        deleteIframePluginPortMapping?: never;
        reqAboutPlugins?: never;
        updateAtlasTile?: never;
        deleteAtlasTile?: never;
        createIframeGameObjectInstantly?: CreateIframeGameObjectInstantly;
        deleteIframeGameObject?: never;
        deleteIframeGameObjectsAt?: never;
        reqIsPluginsOutdated?: never;
    } | {
        joinWorld?: never;
        leaveWorld?: never;
        sendChat?: never;
        moveCharacter?: never;
        broadcast?: never;
        setFieldValue?: never;
        updateCollider?: never;
        createPlugin?: never;
        deletePlugin?: never;
        sendPluginMessage?: never;
        createIframePluginPortMapping?: never;
        deleteIframePluginPortMapping?: never;
        reqAboutPlugins?: never;
        updateAtlasTile?: never;
        deleteAtlasTile?: never;
        createIframeGameObjectInstantly?: never;
        deleteIframeGameObject?: DeleteIframeGameObject;
        deleteIframeGameObjectsAt?: never;
        reqIsPluginsOutdated?: never;
    } | {
        joinWorld?: never;
        leaveWorld?: never;
        sendChat?: never;
        moveCharacter?: never;
        broadcast?: never;
        setFieldValue?: never;
        updateCollider?: never;
        createPlugin?: never;
        deletePlugin?: never;
        sendPluginMessage?: never;
        createIframePluginPortMapping?: never;
        deleteIframePluginPortMapping?: never;
        reqAboutPlugins?: never;
        updateAtlasTile?: never;
        deleteAtlasTile?: never;
        createIframeGameObjectInstantly?: never;
        deleteIframeGameObject?: never;
        deleteIframeGameObjectsAt?: DeleteIframeGameObjectsAt;
        reqIsPluginsOutdated?: never;
    } | {
        joinWorld?: never;
        leaveWorld?: never;
        sendChat?: never;
        moveCharacter?: never;
        broadcast?: never;
        setFieldValue?: never;
        updateCollider?: never;
        createPlugin?: never;
        deletePlugin?: never;
        sendPluginMessage?: never;
        createIframePluginPortMapping?: never;
        deleteIframePluginPortMapping?: never;
        reqAboutPlugins?: never;
        updateAtlasTile?: never;
        deleteAtlasTile?: never;
        createIframeGameObjectInstantly?: never;
        deleteIframeGameObject?: never;
        deleteIframeGameObjectsAt?: never;
        reqIsPluginsOutdated?: ReqIsPluginsOutdated;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("joinWorld" in data && data.joinWorld != undefined) {
                this.joinWorld = data.joinWorld;
            }
            if ("leaveWorld" in data && data.leaveWorld != undefined) {
                this.leaveWorld = data.leaveWorld;
            }
            if ("sendChat" in data && data.sendChat != undefined) {
                this.sendChat = data.sendChat;
            }
            if ("moveCharacter" in data && data.moveCharacter != undefined) {
                this.moveCharacter = data.moveCharacter;
            }
            if ("broadcast" in data && data.broadcast != undefined) {
                this.broadcast = data.broadcast;
            }
            if ("setFieldValue" in data && data.setFieldValue != undefined) {
                this.setFieldValue = data.setFieldValue;
            }
            if ("updateCollider" in data && data.updateCollider != undefined) {
                this.updateCollider = data.updateCollider;
            }
            if ("createPlugin" in data && data.createPlugin != undefined) {
                this.createPlugin = data.createPlugin;
            }
            if ("deletePlugin" in data && data.deletePlugin != undefined) {
                this.deletePlugin = data.deletePlugin;
            }
            if ("sendPluginMessage" in data && data.sendPluginMessage != undefined) {
                this.sendPluginMessage = data.sendPluginMessage;
            }
            if ("createIframePluginPortMapping" in data && data.createIframePluginPortMapping != undefined) {
                this.createIframePluginPortMapping = data.createIframePluginPortMapping;
            }
            if ("deleteIframePluginPortMapping" in data && data.deleteIframePluginPortMapping != undefined) {
                this.deleteIframePluginPortMapping = data.deleteIframePluginPortMapping;
            }
            if ("reqAboutPlugins" in data && data.reqAboutPlugins != undefined) {
                this.reqAboutPlugins = data.reqAboutPlugins;
            }
            if ("updateAtlasTile" in data && data.updateAtlasTile != undefined) {
                this.updateAtlasTile = data.updateAtlasTile;
            }
            if ("deleteAtlasTile" in data && data.deleteAtlasTile != undefined) {
                this.deleteAtlasTile = data.deleteAtlasTile;
            }
            if ("createIframeGameObjectInstantly" in data && data.createIframeGameObjectInstantly != undefined) {
                this.createIframeGameObjectInstantly = data.createIframeGameObjectInstantly;
            }
            if ("deleteIframeGameObject" in data && data.deleteIframeGameObject != undefined) {
                this.deleteIframeGameObject = data.deleteIframeGameObject;
            }
            if ("deleteIframeGameObjectsAt" in data && data.deleteIframeGameObjectsAt != undefined) {
                this.deleteIframeGameObjectsAt = data.deleteIframeGameObjectsAt;
            }
            if ("reqIsPluginsOutdated" in data && data.reqIsPluginsOutdated != undefined) {
                this.reqIsPluginsOutdated = data.reqIsPluginsOutdated;
            }
        }
    }
    get joinWorld() {
        return pb_1.Message.getWrapperField(this, JoinWorld, 1) as JoinWorld;
    }
    set joinWorld(value: JoinWorld) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get has_joinWorld() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get leaveWorld() {
        return pb_1.Message.getWrapperField(this, LeaveWorld, 2) as LeaveWorld;
    }
    set leaveWorld(value: LeaveWorld) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get has_leaveWorld() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get sendChat() {
        return pb_1.Message.getWrapperField(this, SendChat, 3) as SendChat;
    }
    set sendChat(value: SendChat) {
        pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
    }
    get has_sendChat() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get moveCharacter() {
        return pb_1.Message.getWrapperField(this, MoveCharacter, 4) as MoveCharacter;
    }
    set moveCharacter(value: MoveCharacter) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
    }
    get has_moveCharacter() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get broadcast() {
        return pb_1.Message.getWrapperField(this, Broadcast, 5) as Broadcast;
    }
    set broadcast(value: Broadcast) {
        pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
    }
    get has_broadcast() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get setFieldValue() {
        return pb_1.Message.getWrapperField(this, SetFieldValue, 6) as SetFieldValue;
    }
    set setFieldValue(value: SetFieldValue) {
        pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
    }
    get has_setFieldValue() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get updateCollider() {
        return pb_1.Message.getWrapperField(this, UpdateCollider, 7) as UpdateCollider;
    }
    set updateCollider(value: UpdateCollider) {
        pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
    }
    get has_updateCollider() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get createPlugin() {
        return pb_1.Message.getWrapperField(this, CreatePlugin, 8) as CreatePlugin;
    }
    set createPlugin(value: CreatePlugin) {
        pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
    }
    get has_createPlugin() {
        return pb_1.Message.getField(this, 8) != null;
    }
    get deletePlugin() {
        return pb_1.Message.getWrapperField(this, DeletePlugin, 9) as DeletePlugin;
    }
    set deletePlugin(value: DeletePlugin) {
        pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
    }
    get has_deletePlugin() {
        return pb_1.Message.getField(this, 9) != null;
    }
    get sendPluginMessage() {
        return pb_1.Message.getWrapperField(this, SendPluginMessage, 10) as SendPluginMessage;
    }
    set sendPluginMessage(value: SendPluginMessage) {
        pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
    }
    get has_sendPluginMessage() {
        return pb_1.Message.getField(this, 10) != null;
    }
    get createIframePluginPortMapping() {
        return pb_1.Message.getWrapperField(this, CreateIframePluginPortMapping, 11) as CreateIframePluginPortMapping;
    }
    set createIframePluginPortMapping(value: CreateIframePluginPortMapping) {
        pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
    }
    get has_createIframePluginPortMapping() {
        return pb_1.Message.getField(this, 11) != null;
    }
    get deleteIframePluginPortMapping() {
        return pb_1.Message.getWrapperField(this, DeleteIframePluginPortMapping, 12) as DeleteIframePluginPortMapping;
    }
    set deleteIframePluginPortMapping(value: DeleteIframePluginPortMapping) {
        pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
    }
    get has_deleteIframePluginPortMapping() {
        return pb_1.Message.getField(this, 12) != null;
    }
    get reqAboutPlugins() {
        return pb_1.Message.getWrapperField(this, ReqAboutPlugins, 13) as ReqAboutPlugins;
    }
    set reqAboutPlugins(value: ReqAboutPlugins) {
        pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
    }
    get has_reqAboutPlugins() {
        return pb_1.Message.getField(this, 13) != null;
    }
    get updateAtlasTile() {
        return pb_1.Message.getWrapperField(this, UpdateAtlasTile, 14) as UpdateAtlasTile;
    }
    set updateAtlasTile(value: UpdateAtlasTile) {
        pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
    }
    get has_updateAtlasTile() {
        return pb_1.Message.getField(this, 14) != null;
    }
    get deleteAtlasTile() {
        return pb_1.Message.getWrapperField(this, DeleteAtlasTile, 15) as DeleteAtlasTile;
    }
    set deleteAtlasTile(value: DeleteAtlasTile) {
        pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[0], value);
    }
    get has_deleteAtlasTile() {
        return pb_1.Message.getField(this, 15) != null;
    }
    get createIframeGameObjectInstantly() {
        return pb_1.Message.getWrapperField(this, CreateIframeGameObjectInstantly, 16) as CreateIframeGameObjectInstantly;
    }
    set createIframeGameObjectInstantly(value: CreateIframeGameObjectInstantly) {
        pb_1.Message.setOneofWrapperField(this, 16, this.#one_of_decls[0], value);
    }
    get has_createIframeGameObjectInstantly() {
        return pb_1.Message.getField(this, 16) != null;
    }
    get deleteIframeGameObject() {
        return pb_1.Message.getWrapperField(this, DeleteIframeGameObject, 17) as DeleteIframeGameObject;
    }
    set deleteIframeGameObject(value: DeleteIframeGameObject) {
        pb_1.Message.setOneofWrapperField(this, 17, this.#one_of_decls[0], value);
    }
    get has_deleteIframeGameObject() {
        return pb_1.Message.getField(this, 17) != null;
    }
    get deleteIframeGameObjectsAt() {
        return pb_1.Message.getWrapperField(this, DeleteIframeGameObjectsAt, 18) as DeleteIframeGameObjectsAt;
    }
    set deleteIframeGameObjectsAt(value: DeleteIframeGameObjectsAt) {
        pb_1.Message.setOneofWrapperField(this, 18, this.#one_of_decls[0], value);
    }
    get has_deleteIframeGameObjectsAt() {
        return pb_1.Message.getField(this, 18) != null;
    }
    get reqIsPluginsOutdated() {
        return pb_1.Message.getWrapperField(this, ReqIsPluginsOutdated, 19) as ReqIsPluginsOutdated;
    }
    set reqIsPluginsOutdated(value: ReqIsPluginsOutdated) {
        pb_1.Message.setOneofWrapperField(this, 19, this.#one_of_decls[0], value);
    }
    get has_reqIsPluginsOutdated() {
        return pb_1.Message.getField(this, 19) != null;
    }
    get event() {
        const cases: {
            [index: number]: "none" | "joinWorld" | "leaveWorld" | "sendChat" | "moveCharacter" | "broadcast" | "setFieldValue" | "updateCollider" | "createPlugin" | "deletePlugin" | "sendPluginMessage" | "createIframePluginPortMapping" | "deleteIframePluginPortMapping" | "reqAboutPlugins" | "updateAtlasTile" | "deleteAtlasTile" | "createIframeGameObjectInstantly" | "deleteIframeGameObject" | "deleteIframeGameObjectsAt" | "reqIsPluginsOutdated";
        } = {
            0: "none",
            1: "joinWorld",
            2: "leaveWorld",
            3: "sendChat",
            4: "moveCharacter",
            5: "broadcast",
            6: "setFieldValue",
            7: "updateCollider",
            8: "createPlugin",
            9: "deletePlugin",
            10: "sendPluginMessage",
            11: "createIframePluginPortMapping",
            12: "deleteIframePluginPortMapping",
            13: "reqAboutPlugins",
            14: "updateAtlasTile",
            15: "deleteAtlasTile",
            16: "createIframeGameObjectInstantly",
            17: "deleteIframeGameObject",
            18: "deleteIframeGameObjectsAt",
            19: "reqIsPluginsOutdated"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])];
    }
    static fromObject(data: {
        joinWorld?: ReturnType<typeof JoinWorld.prototype.toObject>;
        leaveWorld?: ReturnType<typeof LeaveWorld.prototype.toObject>;
        sendChat?: ReturnType<typeof SendChat.prototype.toObject>;
        moveCharacter?: ReturnType<typeof MoveCharacter.prototype.toObject>;
        broadcast?: ReturnType<typeof Broadcast.prototype.toObject>;
        setFieldValue?: ReturnType<typeof SetFieldValue.prototype.toObject>;
        updateCollider?: ReturnType<typeof UpdateCollider.prototype.toObject>;
        createPlugin?: ReturnType<typeof CreatePlugin.prototype.toObject>;
        deletePlugin?: ReturnType<typeof DeletePlugin.prototype.toObject>;
        sendPluginMessage?: ReturnType<typeof SendPluginMessage.prototype.toObject>;
        createIframePluginPortMapping?: ReturnType<typeof CreateIframePluginPortMapping.prototype.toObject>;
        deleteIframePluginPortMapping?: ReturnType<typeof DeleteIframePluginPortMapping.prototype.toObject>;
        reqAboutPlugins?: ReturnType<typeof ReqAboutPlugins.prototype.toObject>;
        updateAtlasTile?: ReturnType<typeof UpdateAtlasTile.prototype.toObject>;
        deleteAtlasTile?: ReturnType<typeof DeleteAtlasTile.prototype.toObject>;
        createIframeGameObjectInstantly?: ReturnType<typeof CreateIframeGameObjectInstantly.prototype.toObject>;
        deleteIframeGameObject?: ReturnType<typeof DeleteIframeGameObject.prototype.toObject>;
        deleteIframeGameObjectsAt?: ReturnType<typeof DeleteIframeGameObjectsAt.prototype.toObject>;
        reqIsPluginsOutdated?: ReturnType<typeof ReqIsPluginsOutdated.prototype.toObject>;
    }): ClientEvent {
        const message = new ClientEvent({});
        if (data.joinWorld != null) {
            message.joinWorld = JoinWorld.fromObject(data.joinWorld);
        }
        if (data.leaveWorld != null) {
            message.leaveWorld = LeaveWorld.fromObject(data.leaveWorld);
        }
        if (data.sendChat != null) {
            message.sendChat = SendChat.fromObject(data.sendChat);
        }
        if (data.moveCharacter != null) {
            message.moveCharacter = MoveCharacter.fromObject(data.moveCharacter);
        }
        if (data.broadcast != null) {
            message.broadcast = Broadcast.fromObject(data.broadcast);
        }
        if (data.setFieldValue != null) {
            message.setFieldValue = SetFieldValue.fromObject(data.setFieldValue);
        }
        if (data.updateCollider != null) {
            message.updateCollider = UpdateCollider.fromObject(data.updateCollider);
        }
        if (data.createPlugin != null) {
            message.createPlugin = CreatePlugin.fromObject(data.createPlugin);
        }
        if (data.deletePlugin != null) {
            message.deletePlugin = DeletePlugin.fromObject(data.deletePlugin);
        }
        if (data.sendPluginMessage != null) {
            message.sendPluginMessage = SendPluginMessage.fromObject(data.sendPluginMessage);
        }
        if (data.createIframePluginPortMapping != null) {
            message.createIframePluginPortMapping = CreateIframePluginPortMapping.fromObject(data.createIframePluginPortMapping);
        }
        if (data.deleteIframePluginPortMapping != null) {
            message.deleteIframePluginPortMapping = DeleteIframePluginPortMapping.fromObject(data.deleteIframePluginPortMapping);
        }
        if (data.reqAboutPlugins != null) {
            message.reqAboutPlugins = ReqAboutPlugins.fromObject(data.reqAboutPlugins);
        }
        if (data.updateAtlasTile != null) {
            message.updateAtlasTile = UpdateAtlasTile.fromObject(data.updateAtlasTile);
        }
        if (data.deleteAtlasTile != null) {
            message.deleteAtlasTile = DeleteAtlasTile.fromObject(data.deleteAtlasTile);
        }
        if (data.createIframeGameObjectInstantly != null) {
            message.createIframeGameObjectInstantly = CreateIframeGameObjectInstantly.fromObject(data.createIframeGameObjectInstantly);
        }
        if (data.deleteIframeGameObject != null) {
            message.deleteIframeGameObject = DeleteIframeGameObject.fromObject(data.deleteIframeGameObject);
        }
        if (data.deleteIframeGameObjectsAt != null) {
            message.deleteIframeGameObjectsAt = DeleteIframeGameObjectsAt.fromObject(data.deleteIframeGameObjectsAt);
        }
        if (data.reqIsPluginsOutdated != null) {
            message.reqIsPluginsOutdated = ReqIsPluginsOutdated.fromObject(data.reqIsPluginsOutdated);
        }
        return message;
    }
    toObject() {
        const data: {
            joinWorld?: ReturnType<typeof JoinWorld.prototype.toObject>;
            leaveWorld?: ReturnType<typeof LeaveWorld.prototype.toObject>;
            sendChat?: ReturnType<typeof SendChat.prototype.toObject>;
            moveCharacter?: ReturnType<typeof MoveCharacter.prototype.toObject>;
            broadcast?: ReturnType<typeof Broadcast.prototype.toObject>;
            setFieldValue?: ReturnType<typeof SetFieldValue.prototype.toObject>;
            updateCollider?: ReturnType<typeof UpdateCollider.prototype.toObject>;
            createPlugin?: ReturnType<typeof CreatePlugin.prototype.toObject>;
            deletePlugin?: ReturnType<typeof DeletePlugin.prototype.toObject>;
            sendPluginMessage?: ReturnType<typeof SendPluginMessage.prototype.toObject>;
            createIframePluginPortMapping?: ReturnType<typeof CreateIframePluginPortMapping.prototype.toObject>;
            deleteIframePluginPortMapping?: ReturnType<typeof DeleteIframePluginPortMapping.prototype.toObject>;
            reqAboutPlugins?: ReturnType<typeof ReqAboutPlugins.prototype.toObject>;
            updateAtlasTile?: ReturnType<typeof UpdateAtlasTile.prototype.toObject>;
            deleteAtlasTile?: ReturnType<typeof DeleteAtlasTile.prototype.toObject>;
            createIframeGameObjectInstantly?: ReturnType<typeof CreateIframeGameObjectInstantly.prototype.toObject>;
            deleteIframeGameObject?: ReturnType<typeof DeleteIframeGameObject.prototype.toObject>;
            deleteIframeGameObjectsAt?: ReturnType<typeof DeleteIframeGameObjectsAt.prototype.toObject>;
            reqIsPluginsOutdated?: ReturnType<typeof ReqIsPluginsOutdated.prototype.toObject>;
        } = {};
        if (this.joinWorld != null) {
            data.joinWorld = this.joinWorld.toObject();
        }
        if (this.leaveWorld != null) {
            data.leaveWorld = this.leaveWorld.toObject();
        }
        if (this.sendChat != null) {
            data.sendChat = this.sendChat.toObject();
        }
        if (this.moveCharacter != null) {
            data.moveCharacter = this.moveCharacter.toObject();
        }
        if (this.broadcast != null) {
            data.broadcast = this.broadcast.toObject();
        }
        if (this.setFieldValue != null) {
            data.setFieldValue = this.setFieldValue.toObject();
        }
        if (this.updateCollider != null) {
            data.updateCollider = this.updateCollider.toObject();
        }
        if (this.createPlugin != null) {
            data.createPlugin = this.createPlugin.toObject();
        }
        if (this.deletePlugin != null) {
            data.deletePlugin = this.deletePlugin.toObject();
        }
        if (this.sendPluginMessage != null) {
            data.sendPluginMessage = this.sendPluginMessage.toObject();
        }
        if (this.createIframePluginPortMapping != null) {
            data.createIframePluginPortMapping = this.createIframePluginPortMapping.toObject();
        }
        if (this.deleteIframePluginPortMapping != null) {
            data.deleteIframePluginPortMapping = this.deleteIframePluginPortMapping.toObject();
        }
        if (this.reqAboutPlugins != null) {
            data.reqAboutPlugins = this.reqAboutPlugins.toObject();
        }
        if (this.updateAtlasTile != null) {
            data.updateAtlasTile = this.updateAtlasTile.toObject();
        }
        if (this.deleteAtlasTile != null) {
            data.deleteAtlasTile = this.deleteAtlasTile.toObject();
        }
        if (this.createIframeGameObjectInstantly != null) {
            data.createIframeGameObjectInstantly = this.createIframeGameObjectInstantly.toObject();
        }
        if (this.deleteIframeGameObject != null) {
            data.deleteIframeGameObject = this.deleteIframeGameObject.toObject();
        }
        if (this.deleteIframeGameObjectsAt != null) {
            data.deleteIframeGameObjectsAt = this.deleteIframeGameObjectsAt.toObject();
        }
        if (this.reqIsPluginsOutdated != null) {
            data.reqIsPluginsOutdated = this.reqIsPluginsOutdated.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_joinWorld)
            writer.writeMessage(1, this.joinWorld, () => this.joinWorld.serialize(writer));
        if (this.has_leaveWorld)
            writer.writeMessage(2, this.leaveWorld, () => this.leaveWorld.serialize(writer));
        if (this.has_sendChat)
            writer.writeMessage(3, this.sendChat, () => this.sendChat.serialize(writer));
        if (this.has_moveCharacter)
            writer.writeMessage(4, this.moveCharacter, () => this.moveCharacter.serialize(writer));
        if (this.has_broadcast)
            writer.writeMessage(5, this.broadcast, () => this.broadcast.serialize(writer));
        if (this.has_setFieldValue)
            writer.writeMessage(6, this.setFieldValue, () => this.setFieldValue.serialize(writer));
        if (this.has_updateCollider)
            writer.writeMessage(7, this.updateCollider, () => this.updateCollider.serialize(writer));
        if (this.has_createPlugin)
            writer.writeMessage(8, this.createPlugin, () => this.createPlugin.serialize(writer));
        if (this.has_deletePlugin)
            writer.writeMessage(9, this.deletePlugin, () => this.deletePlugin.serialize(writer));
        if (this.has_sendPluginMessage)
            writer.writeMessage(10, this.sendPluginMessage, () => this.sendPluginMessage.serialize(writer));
        if (this.has_createIframePluginPortMapping)
            writer.writeMessage(11, this.createIframePluginPortMapping, () => this.createIframePluginPortMapping.serialize(writer));
        if (this.has_deleteIframePluginPortMapping)
            writer.writeMessage(12, this.deleteIframePluginPortMapping, () => this.deleteIframePluginPortMapping.serialize(writer));
        if (this.has_reqAboutPlugins)
            writer.writeMessage(13, this.reqAboutPlugins, () => this.reqAboutPlugins.serialize(writer));
        if (this.has_updateAtlasTile)
            writer.writeMessage(14, this.updateAtlasTile, () => this.updateAtlasTile.serialize(writer));
        if (this.has_deleteAtlasTile)
            writer.writeMessage(15, this.deleteAtlasTile, () => this.deleteAtlasTile.serialize(writer));
        if (this.has_createIframeGameObjectInstantly)
            writer.writeMessage(16, this.createIframeGameObjectInstantly, () => this.createIframeGameObjectInstantly.serialize(writer));
        if (this.has_deleteIframeGameObject)
            writer.writeMessage(17, this.deleteIframeGameObject, () => this.deleteIframeGameObject.serialize(writer));
        if (this.has_deleteIframeGameObjectsAt)
            writer.writeMessage(18, this.deleteIframeGameObjectsAt, () => this.deleteIframeGameObjectsAt.serialize(writer));
        if (this.has_reqIsPluginsOutdated)
            writer.writeMessage(19, this.reqIsPluginsOutdated, () => this.reqIsPluginsOutdated.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClientEvent {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClientEvent();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.joinWorld, () => message.joinWorld = JoinWorld.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.leaveWorld, () => message.leaveWorld = LeaveWorld.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.sendChat, () => message.sendChat = SendChat.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.moveCharacter, () => message.moveCharacter = MoveCharacter.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.broadcast, () => message.broadcast = Broadcast.deserialize(reader));
                    break;
                case 6:
                    reader.readMessage(message.setFieldValue, () => message.setFieldValue = SetFieldValue.deserialize(reader));
                    break;
                case 7:
                    reader.readMessage(message.updateCollider, () => message.updateCollider = UpdateCollider.deserialize(reader));
                    break;
                case 8:
                    reader.readMessage(message.createPlugin, () => message.createPlugin = CreatePlugin.deserialize(reader));
                    break;
                case 9:
                    reader.readMessage(message.deletePlugin, () => message.deletePlugin = DeletePlugin.deserialize(reader));
                    break;
                case 10:
                    reader.readMessage(message.sendPluginMessage, () => message.sendPluginMessage = SendPluginMessage.deserialize(reader));
                    break;
                case 11:
                    reader.readMessage(message.createIframePluginPortMapping, () => message.createIframePluginPortMapping = CreateIframePluginPortMapping.deserialize(reader));
                    break;
                case 12:
                    reader.readMessage(message.deleteIframePluginPortMapping, () => message.deleteIframePluginPortMapping = DeleteIframePluginPortMapping.deserialize(reader));
                    break;
                case 13:
                    reader.readMessage(message.reqAboutPlugins, () => message.reqAboutPlugins = ReqAboutPlugins.deserialize(reader));
                    break;
                case 14:
                    reader.readMessage(message.updateAtlasTile, () => message.updateAtlasTile = UpdateAtlasTile.deserialize(reader));
                    break;
                case 15:
                    reader.readMessage(message.deleteAtlasTile, () => message.deleteAtlasTile = DeleteAtlasTile.deserialize(reader));
                    break;
                case 16:
                    reader.readMessage(message.createIframeGameObjectInstantly, () => message.createIframeGameObjectInstantly = CreateIframeGameObjectInstantly.deserialize(reader));
                    break;
                case 17:
                    reader.readMessage(message.deleteIframeGameObject, () => message.deleteIframeGameObject = DeleteIframeGameObject.deserialize(reader));
                    break;
                case 18:
                    reader.readMessage(message.deleteIframeGameObjectsAt, () => message.deleteIframeGameObjectsAt = DeleteIframeGameObjectsAt.deserialize(reader));
                    break;
                case 19:
                    reader.readMessage(message.reqIsPluginsOutdated, () => message.reqIsPluginsOutdated = ReqIsPluginsOutdated.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ClientEvent {
        return ClientEvent.deserialize(bytes);
    }
}
export class JoinWorld extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        x?: number;
        y?: number;
        id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("x" in data && data.x != undefined) {
                this.x = data.x;
            }
            if ("y" in data && data.y != undefined) {
                this.y = data.y;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
        }
    }
    get x() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set x(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get y() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set y(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        x?: number;
        y?: number;
        id?: string;
    }): JoinWorld {
        const message = new JoinWorld({});
        if (data.x != null) {
            message.x = data.x;
        }
        if (data.y != null) {
            message.y = data.y;
        }
        if (data.id != null) {
            message.id = data.id;
        }
        return message;
    }
    toObject() {
        const data: {
            x?: number;
            y?: number;
            id?: string;
        } = {};
        if (this.x != null) {
            data.x = this.x;
        }
        if (this.y != null) {
            data.y = this.y;
        }
        if (this.id != null) {
            data.id = this.id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.x != 0)
            writer.writeInt32(1, this.x);
        if (this.y != 0)
            writer.writeInt32(2, this.y);
        if (this.id.length)
            writer.writeString(3, this.id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JoinWorld {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JoinWorld();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.x = reader.readInt32();
                    break;
                case 2:
                    message.y = reader.readInt32();
                    break;
                case 3:
                    message.id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): JoinWorld {
        return JoinWorld.deserialize(bytes);
    }
}
export class LeaveWorld extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): LeaveWorld {
        const message = new LeaveWorld({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LeaveWorld {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LeaveWorld();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): LeaveWorld {
        return LeaveWorld.deserialize(bytes);
    }
}
export class SendChat extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        message?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
        }
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        message?: string;
    }): SendChat {
        const message = new SendChat({});
        if (data.message != null) {
            message.message = data.message;
        }
        return message;
    }
    toObject() {
        const data: {
            message?: string;
        } = {};
        if (this.message != null) {
            data.message = this.message;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.message.length)
            writer.writeString(1, this.message);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SendChat {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SendChat();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.message = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SendChat {
        return SendChat.deserialize(bytes);
    }
}
export class MoveCharacter extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        characterMove?: MoveCharacter.CharacterMove;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("characterMove" in data && data.characterMove != undefined) {
                this.characterMove = data.characterMove;
            }
        }
    }
    get characterMove() {
        return pb_1.Message.getWrapperField(this, MoveCharacter.CharacterMove, 1) as MoveCharacter.CharacterMove;
    }
    set characterMove(value: MoveCharacter.CharacterMove) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_characterMove() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        characterMove?: ReturnType<typeof MoveCharacter.CharacterMove.prototype.toObject>;
    }): MoveCharacter {
        const message = new MoveCharacter({});
        if (data.characterMove != null) {
            message.characterMove = MoveCharacter.CharacterMove.fromObject(data.characterMove);
        }
        return message;
    }
    toObject() {
        const data: {
            characterMove?: ReturnType<typeof MoveCharacter.CharacterMove.prototype.toObject>;
        } = {};
        if (this.characterMove != null) {
            data.characterMove = this.characterMove.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_characterMove)
            writer.writeMessage(1, this.characterMove, () => this.characterMove.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveCharacter {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveCharacter();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.characterMove, () => message.characterMove = MoveCharacter.CharacterMove.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MoveCharacter {
        return MoveCharacter.deserialize(bytes);
    }
}
export namespace MoveCharacter {
    export class CharacterMove extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            x?: number;
            y?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("x" in data && data.x != undefined) {
                    this.x = data.x;
                }
                if ("y" in data && data.y != undefined) {
                    this.y = data.y;
                }
            }
        }
        get x() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set x(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get y() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set y(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            x?: number;
            y?: number;
        }): CharacterMove {
            const message = new CharacterMove({});
            if (data.x != null) {
                message.x = data.x;
            }
            if (data.y != null) {
                message.y = data.y;
            }
            return message;
        }
        toObject() {
            const data: {
                x?: number;
                y?: number;
            } = {};
            if (this.x != null) {
                data.x = this.x;
            }
            if (this.y != null) {
                data.y = this.y;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.x != 0)
                writer.writeInt32(1, this.x);
            if (this.y != 0)
                writer.writeInt32(2, this.y);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CharacterMove {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CharacterMove();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.x = reader.readInt32();
                        break;
                    case 2:
                        message.y = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CharacterMove {
            return CharacterMove.deserialize(bytes);
        }
    }
}
export class Broadcast extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        message?: string;
        id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
        }
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        message?: string;
        id?: number;
    }): Broadcast {
        const message = new Broadcast({});
        if (data.message != null) {
            message.message = data.message;
        }
        if (data.id != null) {
            message.id = data.id;
        }
        return message;
    }
    toObject() {
        const data: {
            message?: string;
            id?: number;
        } = {};
        if (this.message != null) {
            data.message = this.message;
        }
        if (this.id != null) {
            data.id = this.id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.message.length)
            writer.writeString(1, this.message);
        if (this.id != 0)
            writer.writeInt32(2, this.id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Broadcast {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Broadcast();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.message = reader.readString();
                    break;
                case 2:
                    message.id = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Broadcast {
        return Broadcast.deserialize(bytes);
    }
}
export class SetFieldValue extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        value?: string;
        id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("value" in data && data.value != undefined) {
                this.value = data.value;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
        }
    }
    get value() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set value(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        value?: string;
        id?: number;
    }): SetFieldValue {
        const message = new SetFieldValue({});
        if (data.value != null) {
            message.value = data.value;
        }
        if (data.id != null) {
            message.id = data.id;
        }
        return message;
    }
    toObject() {
        const data: {
            value?: string;
            id?: number;
        } = {};
        if (this.value != null) {
            data.value = this.value;
        }
        if (this.id != null) {
            data.id = this.id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.value.length)
            writer.writeString(1, this.value);
        if (this.id != 0)
            writer.writeInt32(2, this.id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetFieldValue {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetFieldValue();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.value = reader.readString();
                    break;
                case 2:
                    message.id = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SetFieldValue {
        return SetFieldValue.deserialize(bytes);
    }
}
export class UpdateCollider extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        x?: number;
        y?: number;
        isBlocked?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("x" in data && data.x != undefined) {
                this.x = data.x;
            }
            if ("y" in data && data.y != undefined) {
                this.y = data.y;
            }
            if ("isBlocked" in data && data.isBlocked != undefined) {
                this.isBlocked = data.isBlocked;
            }
        }
    }
    get x() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set x(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get y() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set y(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get isBlocked() {
        return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
    }
    set isBlocked(value: boolean) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        x?: number;
        y?: number;
        isBlocked?: boolean;
    }): UpdateCollider {
        const message = new UpdateCollider({});
        if (data.x != null) {
            message.x = data.x;
        }
        if (data.y != null) {
            message.y = data.y;
        }
        if (data.isBlocked != null) {
            message.isBlocked = data.isBlocked;
        }
        return message;
    }
    toObject() {
        const data: {
            x?: number;
            y?: number;
            isBlocked?: boolean;
        } = {};
        if (this.x != null) {
            data.x = this.x;
        }
        if (this.y != null) {
            data.y = this.y;
        }
        if (this.isBlocked != null) {
            data.isBlocked = this.isBlocked;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.x != 0)
            writer.writeInt32(1, this.x);
        if (this.y != 0)
            writer.writeInt32(2, this.y);
        if (this.isBlocked != false)
            writer.writeBool(3, this.isBlocked);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateCollider {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateCollider();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.x = reader.readInt32();
                    break;
                case 2:
                    message.y = reader.readInt32();
                    break;
                case 3:
                    message.isBlocked = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UpdateCollider {
        return UpdateCollider.deserialize(bytes);
    }
}
export class CreatePlugin extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        isLocal?: boolean;
        iframeId?: number;
        name?: string;
        code?: string;
        data?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("isLocal" in data && data.isLocal != undefined) {
                this.isLocal = data.isLocal;
            }
            if ("iframeId" in data && data.iframeId != undefined) {
                this.iframeId = data.iframeId;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
        }
    }
    get isLocal() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set isLocal(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    get iframeId() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set iframeId(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set code(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get data() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set data(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        isLocal?: boolean;
        iframeId?: number;
        name?: string;
        code?: string;
        data?: string;
    }): CreatePlugin {
        const message = new CreatePlugin({});
        if (data.isLocal != null) {
            message.isLocal = data.isLocal;
        }
        if (data.iframeId != null) {
            message.iframeId = data.iframeId;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.data != null) {
            message.data = data.data;
        }
        return message;
    }
    toObject() {
        const data: {
            isLocal?: boolean;
            iframeId?: number;
            name?: string;
            code?: string;
            data?: string;
        } = {};
        if (this.isLocal != null) {
            data.isLocal = this.isLocal;
        }
        if (this.iframeId != null) {
            data.iframeId = this.iframeId;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.data != null) {
            data.data = this.data;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.isLocal != false)
            writer.writeBool(1, this.isLocal);
        if (this.iframeId != 0)
            writer.writeInt32(2, this.iframeId);
        if (this.name.length)
            writer.writeString(3, this.name);
        if (this.code.length)
            writer.writeString(4, this.code);
        if (this.data.length)
            writer.writeString(5, this.data);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreatePlugin {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreatePlugin();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.isLocal = reader.readBool();
                    break;
                case 2:
                    message.iframeId = reader.readInt32();
                    break;
                case 3:
                    message.name = reader.readString();
                    break;
                case 4:
                    message.code = reader.readString();
                    break;
                case 5:
                    message.data = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreatePlugin {
        return CreatePlugin.deserialize(bytes);
    }
}
export class DeletePlugin extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        id?: number;
    }): DeletePlugin {
        const message = new DeletePlugin({});
        if (data.id != null) {
            message.id = data.id;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeletePlugin {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeletePlugin();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DeletePlugin {
        return DeletePlugin.deserialize(bytes);
    }
}
export class SendPluginMessage extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        pluginId?: number;
        message?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("pluginId" in data && data.pluginId != undefined) {
                this.pluginId = data.pluginId;
            }
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
        }
    }
    get pluginId() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set pluginId(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        pluginId?: number;
        message?: string;
    }): SendPluginMessage {
        const message = new SendPluginMessage({});
        if (data.pluginId != null) {
            message.pluginId = data.pluginId;
        }
        if (data.message != null) {
            message.message = data.message;
        }
        return message;
    }
    toObject() {
        const data: {
            pluginId?: number;
            message?: string;
        } = {};
        if (this.pluginId != null) {
            data.pluginId = this.pluginId;
        }
        if (this.message != null) {
            data.message = this.message;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.pluginId != 0)
            writer.writeInt32(1, this.pluginId);
        if (this.message.length)
            writer.writeString(2, this.message);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SendPluginMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SendPluginMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.pluginId = reader.readInt32();
                    break;
                case 2:
                    message.message = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SendPluginMessage {
        return SendPluginMessage.deserialize(bytes);
    }
}
export class CreateIframePluginPortMapping extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        portId?: string;
        iframeId?: number;
        pluginId?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("portId" in data && data.portId != undefined) {
                this.portId = data.portId;
            }
            if ("iframeId" in data && data.iframeId != undefined) {
                this.iframeId = data.iframeId;
            }
            if ("pluginId" in data && data.pluginId != undefined) {
                this.pluginId = data.pluginId;
            }
        }
    }
    get portId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set portId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get iframeId() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set iframeId(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get pluginId() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set pluginId(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        portId?: string;
        iframeId?: number;
        pluginId?: number;
    }): CreateIframePluginPortMapping {
        const message = new CreateIframePluginPortMapping({});
        if (data.portId != null) {
            message.portId = data.portId;
        }
        if (data.iframeId != null) {
            message.iframeId = data.iframeId;
        }
        if (data.pluginId != null) {
            message.pluginId = data.pluginId;
        }
        return message;
    }
    toObject() {
        const data: {
            portId?: string;
            iframeId?: number;
            pluginId?: number;
        } = {};
        if (this.portId != null) {
            data.portId = this.portId;
        }
        if (this.iframeId != null) {
            data.iframeId = this.iframeId;
        }
        if (this.pluginId != null) {
            data.pluginId = this.pluginId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.portId.length)
            writer.writeString(1, this.portId);
        if (this.iframeId != 0)
            writer.writeInt32(2, this.iframeId);
        if (this.pluginId != 0)
            writer.writeInt32(3, this.pluginId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateIframePluginPortMapping {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateIframePluginPortMapping();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.portId = reader.readString();
                    break;
                case 2:
                    message.iframeId = reader.readInt32();
                    break;
                case 3:
                    message.pluginId = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateIframePluginPortMapping {
        return CreateIframePluginPortMapping.deserialize(bytes);
    }
}
export class DeleteIframePluginPortMapping extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        id?: number;
    }): DeleteIframePluginPortMapping {
        const message = new DeleteIframePluginPortMapping({});
        if (data.id != null) {
            message.id = data.id;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteIframePluginPortMapping {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteIframePluginPortMapping();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DeleteIframePluginPortMapping {
        return DeleteIframePluginPortMapping.deserialize(bytes);
    }
}
export class ReqAboutPlugins extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        worldId?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("worldId" in data && data.worldId != undefined) {
                this.worldId = data.worldId;
            }
        }
    }
    get worldId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set worldId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        worldId?: string;
    }): ReqAboutPlugins {
        const message = new ReqAboutPlugins({});
        if (data.worldId != null) {
            message.worldId = data.worldId;
        }
        return message;
    }
    toObject() {
        const data: {
            worldId?: string;
        } = {};
        if (this.worldId != null) {
            data.worldId = this.worldId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.worldId.length)
            writer.writeString(1, this.worldId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReqAboutPlugins {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReqAboutPlugins();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.worldId = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReqAboutPlugins {
        return ReqAboutPlugins.deserialize(bytes);
    }
}
export class UpdateAtlasTile extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        type?: number;
        y?: number;
        x?: number;
        atlasId?: number;
        atlasIndex?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("y" in data && data.y != undefined) {
                this.y = data.y;
            }
            if ("x" in data && data.x != undefined) {
                this.x = data.x;
            }
            if ("atlasId" in data && data.atlasId != undefined) {
                this.atlasId = data.atlasId;
            }
            if ("atlasIndex" in data && data.atlasIndex != undefined) {
                this.atlasIndex = data.atlasIndex;
            }
        }
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set type(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get y() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set y(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get x() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set x(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get atlasId() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set atlasId(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get atlasIndex() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set atlasIndex(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        type?: number;
        y?: number;
        x?: number;
        atlasId?: number;
        atlasIndex?: number;
    }): UpdateAtlasTile {
        const message = new UpdateAtlasTile({});
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.y != null) {
            message.y = data.y;
        }
        if (data.x != null) {
            message.x = data.x;
        }
        if (data.atlasId != null) {
            message.atlasId = data.atlasId;
        }
        if (data.atlasIndex != null) {
            message.atlasIndex = data.atlasIndex;
        }
        return message;
    }
    toObject() {
        const data: {
            type?: number;
            y?: number;
            x?: number;
            atlasId?: number;
            atlasIndex?: number;
        } = {};
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.y != null) {
            data.y = this.y;
        }
        if (this.x != null) {
            data.x = this.x;
        }
        if (this.atlasId != null) {
            data.atlasId = this.atlasId;
        }
        if (this.atlasIndex != null) {
            data.atlasIndex = this.atlasIndex;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.type != 0)
            writer.writeInt32(1, this.type);
        if (this.y != 0)
            writer.writeInt32(2, this.y);
        if (this.x != 0)
            writer.writeInt32(3, this.x);
        if (this.atlasId != 0)
            writer.writeInt32(4, this.atlasId);
        if (this.atlasIndex != 0)
            writer.writeInt32(5, this.atlasIndex);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateAtlasTile {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateAtlasTile();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.type = reader.readInt32();
                    break;
                case 2:
                    message.y = reader.readInt32();
                    break;
                case 3:
                    message.x = reader.readInt32();
                    break;
                case 4:
                    message.atlasId = reader.readInt32();
                    break;
                case 5:
                    message.atlasIndex = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UpdateAtlasTile {
        return UpdateAtlasTile.deserialize(bytes);
    }
}
export class DeleteAtlasTile extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        type?: number;
        y?: number;
        x?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("y" in data && data.y != undefined) {
                this.y = data.y;
            }
            if ("x" in data && data.x != undefined) {
                this.x = data.x;
            }
        }
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set type(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get y() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set y(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get x() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set x(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        type?: number;
        y?: number;
        x?: number;
    }): DeleteAtlasTile {
        const message = new DeleteAtlasTile({});
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.y != null) {
            message.y = data.y;
        }
        if (data.x != null) {
            message.x = data.x;
        }
        return message;
    }
    toObject() {
        const data: {
            type?: number;
            y?: number;
            x?: number;
        } = {};
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.y != null) {
            data.y = this.y;
        }
        if (this.x != null) {
            data.x = this.x;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.type != 0)
            writer.writeInt32(1, this.type);
        if (this.y != 0)
            writer.writeInt32(2, this.y);
        if (this.x != 0)
            writer.writeInt32(3, this.x);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteAtlasTile {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteAtlasTile();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.type = reader.readInt32();
                    break;
                case 2:
                    message.y = reader.readInt32();
                    break;
                case 3:
                    message.x = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DeleteAtlasTile {
        return DeleteAtlasTile.deserialize(bytes);
    }
}
export class CreateIframeGameObjectInstantly extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        x?: number;
        y?: number;
        iframeGameObjectProto?: CreateIframeGameObjectInstantly.IframeGameObjectProto;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("x" in data && data.x != undefined) {
                this.x = data.x;
            }
            if ("y" in data && data.y != undefined) {
                this.y = data.y;
            }
            if ("iframeGameObjectProto" in data && data.iframeGameObjectProto != undefined) {
                this.iframeGameObjectProto = data.iframeGameObjectProto;
            }
        }
    }
    get x() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set x(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get y() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set y(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get iframeGameObjectProto() {
        return pb_1.Message.getWrapperField(this, CreateIframeGameObjectInstantly.IframeGameObjectProto, 3) as CreateIframeGameObjectInstantly.IframeGameObjectProto;
    }
    set iframeGameObjectProto(value: CreateIframeGameObjectInstantly.IframeGameObjectProto) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_iframeGameObjectProto() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        x?: number;
        y?: number;
        iframeGameObjectProto?: ReturnType<typeof CreateIframeGameObjectInstantly.IframeGameObjectProto.prototype.toObject>;
    }): CreateIframeGameObjectInstantly {
        const message = new CreateIframeGameObjectInstantly({});
        if (data.x != null) {
            message.x = data.x;
        }
        if (data.y != null) {
            message.y = data.y;
        }
        if (data.iframeGameObjectProto != null) {
            message.iframeGameObjectProto = CreateIframeGameObjectInstantly.IframeGameObjectProto.fromObject(data.iframeGameObjectProto);
        }
        return message;
    }
    toObject() {
        const data: {
            x?: number;
            y?: number;
            iframeGameObjectProto?: ReturnType<typeof CreateIframeGameObjectInstantly.IframeGameObjectProto.prototype.toObject>;
        } = {};
        if (this.x != null) {
            data.x = this.x;
        }
        if (this.y != null) {
            data.y = this.y;
        }
        if (this.iframeGameObjectProto != null) {
            data.iframeGameObjectProto = this.iframeGameObjectProto.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.x != 0)
            writer.writeInt32(1, this.x);
        if (this.y != 0)
            writer.writeInt32(2, this.y);
        if (this.has_iframeGameObjectProto)
            writer.writeMessage(3, this.iframeGameObjectProto, () => this.iframeGameObjectProto.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateIframeGameObjectInstantly {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateIframeGameObjectInstantly();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.x = reader.readInt32();
                    break;
                case 2:
                    message.y = reader.readInt32();
                    break;
                case 3:
                    reader.readMessage(message.iframeGameObjectProto, () => message.iframeGameObjectProto = CreateIframeGameObjectInstantly.IframeGameObjectProto.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateIframeGameObjectInstantly {
        return CreateIframeGameObjectInstantly.deserialize(bytes);
    }
}
export namespace CreateIframeGameObjectInstantly {
    export class IframeGameObjectProto extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            width?: number;
            height?: number;
            offsetX?: number;
            offsetY?: number;
            isPublic?: boolean;
            type?: number;
            src?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("width" in data && data.width != undefined) {
                    this.width = data.width;
                }
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("offsetX" in data && data.offsetX != undefined) {
                    this.offsetX = data.offsetX;
                }
                if ("offsetY" in data && data.offsetY != undefined) {
                    this.offsetY = data.offsetY;
                }
                if ("isPublic" in data && data.isPublic != undefined) {
                    this.isPublic = data.isPublic;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("src" in data && data.src != undefined) {
                    this.src = data.src;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get width() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set width(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get offsetX() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set offsetX(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get offsetY() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set offsetY(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get isPublic() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set isPublic(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set type(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get src() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set src(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            name?: string;
            width?: number;
            height?: number;
            offsetX?: number;
            offsetY?: number;
            isPublic?: boolean;
            type?: number;
            src?: string;
        }): IframeGameObjectProto {
            const message = new IframeGameObjectProto({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.width != null) {
                message.width = data.width;
            }
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.offsetX != null) {
                message.offsetX = data.offsetX;
            }
            if (data.offsetY != null) {
                message.offsetY = data.offsetY;
            }
            if (data.isPublic != null) {
                message.isPublic = data.isPublic;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.src != null) {
                message.src = data.src;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                width?: number;
                height?: number;
                offsetX?: number;
                offsetY?: number;
                isPublic?: boolean;
                type?: number;
                src?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.width != null) {
                data.width = this.width;
            }
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.offsetX != null) {
                data.offsetX = this.offsetX;
            }
            if (this.offsetY != null) {
                data.offsetY = this.offsetY;
            }
            if (this.isPublic != null) {
                data.isPublic = this.isPublic;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.src != null) {
                data.src = this.src;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.width != 0)
                writer.writeInt32(2, this.width);
            if (this.height != 0)
                writer.writeInt32(3, this.height);
            if (this.offsetX != 0)
                writer.writeInt32(4, this.offsetX);
            if (this.offsetY != 0)
                writer.writeInt32(5, this.offsetY);
            if (this.isPublic != false)
                writer.writeBool(6, this.isPublic);
            if (this.type != 0)
                writer.writeInt32(7, this.type);
            if (this.src.length)
                writer.writeString(8, this.src);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IframeGameObjectProto {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IframeGameObjectProto();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.width = reader.readInt32();
                        break;
                    case 3:
                        message.height = reader.readInt32();
                        break;
                    case 4:
                        message.offsetX = reader.readInt32();
                        break;
                    case 5:
                        message.offsetY = reader.readInt32();
                        break;
                    case 6:
                        message.isPublic = reader.readBool();
                        break;
                    case 7:
                        message.type = reader.readInt32();
                        break;
                    case 8:
                        message.src = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IframeGameObjectProto {
            return IframeGameObjectProto.deserialize(bytes);
        }
    }
}
export class DeleteIframeGameObject extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        id?: number;
    }): DeleteIframeGameObject {
        const message = new DeleteIframeGameObject({});
        if (data.id != null) {
            message.id = data.id;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteIframeGameObject {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteIframeGameObject();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DeleteIframeGameObject {
        return DeleteIframeGameObject.deserialize(bytes);
    }
}
export class DeleteIframeGameObjectsAt extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        x?: number;
        y?: number;
        type?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("x" in data && data.x != undefined) {
                this.x = data.x;
            }
            if ("y" in data && data.y != undefined) {
                this.y = data.y;
            }
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
        }
    }
    get x() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set x(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get y() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set y(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set type(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        x?: number;
        y?: number;
        type?: number;
    }): DeleteIframeGameObjectsAt {
        const message = new DeleteIframeGameObjectsAt({});
        if (data.x != null) {
            message.x = data.x;
        }
        if (data.y != null) {
            message.y = data.y;
        }
        if (data.type != null) {
            message.type = data.type;
        }
        return message;
    }
    toObject() {
        const data: {
            x?: number;
            y?: number;
            type?: number;
        } = {};
        if (this.x != null) {
            data.x = this.x;
        }
        if (this.y != null) {
            data.y = this.y;
        }
        if (this.type != null) {
            data.type = this.type;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.x != 0)
            writer.writeInt32(1, this.x);
        if (this.y != 0)
            writer.writeInt32(2, this.y);
        if (this.type != 0)
            writer.writeInt32(3, this.type);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteIframeGameObjectsAt {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteIframeGameObjectsAt();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.x = reader.readInt32();
                    break;
                case 2:
                    message.y = reader.readInt32();
                    break;
                case 3:
                    message.type = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DeleteIframeGameObjectsAt {
        return DeleteIframeGameObjectsAt.deserialize(bytes);
    }
}
export class ReqIsPluginsOutdated extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        pluginInfos?: ReqIsPluginsOutdated.PluginInfo[];
        id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("pluginInfos" in data && data.pluginInfos != undefined) {
                this.pluginInfos = data.pluginInfos;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
        }
    }
    get pluginInfos() {
        return pb_1.Message.getRepeatedWrapperField(this, ReqIsPluginsOutdated.PluginInfo, 1) as ReqIsPluginsOutdated.PluginInfo[];
    }
    set pluginInfos(value: ReqIsPluginsOutdated.PluginInfo[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        pluginInfos?: ReturnType<typeof ReqIsPluginsOutdated.PluginInfo.prototype.toObject>[];
        id?: number;
    }): ReqIsPluginsOutdated {
        const message = new ReqIsPluginsOutdated({});
        if (data.pluginInfos != null) {
            message.pluginInfos = data.pluginInfos.map(item => ReqIsPluginsOutdated.PluginInfo.fromObject(item));
        }
        if (data.id != null) {
            message.id = data.id;
        }
        return message;
    }
    toObject() {
        const data: {
            pluginInfos?: ReturnType<typeof ReqIsPluginsOutdated.PluginInfo.prototype.toObject>[];
            id?: number;
        } = {};
        if (this.pluginInfos != null) {
            data.pluginInfos = this.pluginInfos.map((item: ReqIsPluginsOutdated.PluginInfo) => item.toObject());
        }
        if (this.id != null) {
            data.id = this.id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.pluginInfos.length)
            writer.writeRepeatedMessage(1, this.pluginInfos, (item: ReqIsPluginsOutdated.PluginInfo) => item.serialize(writer));
        if (this.id != 0)
            writer.writeInt32(2, this.id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReqIsPluginsOutdated {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReqIsPluginsOutdated();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.pluginInfos, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ReqIsPluginsOutdated.PluginInfo.deserialize(reader), ReqIsPluginsOutdated.PluginInfo));
                    break;
                case 2:
                    message.id = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReqIsPluginsOutdated {
        return ReqIsPluginsOutdated.deserialize(bytes);
    }
}
export namespace ReqIsPluginsOutdated {
    export class PluginInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            code?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set code(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: number;
            code?: string;
        }): PluginInfo {
            const message = new PluginInfo({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                code?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.code.length)
                writer.writeString(2, this.code);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PluginInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PluginInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PluginInfo {
            return PluginInfo.deserialize(bytes);
        }
    }
}
export class ServerEvent extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]];
    constructor(data?: any[] | ({} & (({
        kicked?: Kicked;
        playerListChanged?: never;
        chatAdded?: never;
        characterMoved?: never;
        messageBroadcasted?: never;
        fieldValueSetted?: never;
        localPluginCreated?: never;
        globalPluginCreated?: never;
        pluginDeleted?: never;
        pluginMessageSent?: never;
        aboutPlugins?: never;
        iframePluginPortMappingCreated?: never;
        iframePluginPortMappingDeleted?: never;
        atlasTileCreated?: never;
        atlasTileDeleted?: never;
        atlasTileUpdated?: never;
        colliderUpdated?: never;
        iframeGameObjectCreated?: never;
        iframeGameObjectDeleted?: never;
        resIsPluginOutdated?: never;
    } | {
        kicked?: never;
        playerListChanged?: PlayerListChanged;
        chatAdded?: never;
        characterMoved?: never;
        messageBroadcasted?: never;
        fieldValueSetted?: never;
        localPluginCreated?: never;
        globalPluginCreated?: never;
        pluginDeleted?: never;
        pluginMessageSent?: never;
        aboutPlugins?: never;
        iframePluginPortMappingCreated?: never;
        iframePluginPortMappingDeleted?: never;
        atlasTileCreated?: never;
        atlasTileDeleted?: never;
        atlasTileUpdated?: never;
        colliderUpdated?: never;
        iframeGameObjectCreated?: never;
        iframeGameObjectDeleted?: never;
        resIsPluginOutdated?: never;
    } | {
        kicked?: never;
        playerListChanged?: never;
        chatAdded?: ChatAdded;
        characterMoved?: never;
        messageBroadcasted?: never;
        fieldValueSetted?: never;
        localPluginCreated?: never;
        globalPluginCreated?: never;
        pluginDeleted?: never;
        pluginMessageSent?: never;
        aboutPlugins?: never;
        iframePluginPortMappingCreated?: never;
        iframePluginPortMappingDeleted?: never;
        atlasTileCreated?: never;
        atlasTileDeleted?: never;
        atlasTileUpdated?: never;
        colliderUpdated?: never;
        iframeGameObjectCreated?: never;
        iframeGameObjectDeleted?: never;
        resIsPluginOutdated?: never;
    } | {
        kicked?: never;
        playerListChanged?: never;
        chatAdded?: never;
        characterMoved?: CharacterMoved;
        messageBroadcasted?: never;
        fieldValueSetted?: never;
        localPluginCreated?: never;
        globalPluginCreated?: never;
        pluginDeleted?: never;
        pluginMessageSent?: never;
        aboutPlugins?: never;
        iframePluginPortMappingCreated?: never;
        iframePluginPortMappingDeleted?: never;
        atlasTileCreated?: never;
        atlasTileDeleted?: never;
        atlasTileUpdated?: never;
        colliderUpdated?: never;
        iframeGameObjectCreated?: never;
        iframeGameObjectDeleted?: never;
        resIsPluginOutdated?: never;
    } | {
        kicked?: never;
        playerListChanged?: never;
        chatAdded?: never;
        characterMoved?: never;
        messageBroadcasted?: MessageBroadcasted;
        fieldValueSetted?: never;
        localPluginCreated?: never;
        globalPluginCreated?: never;
        pluginDeleted?: never;
        pluginMessageSent?: never;
        aboutPlugins?: never;
        iframePluginPortMappingCreated?: never;
        iframePluginPortMappingDeleted?: never;
        atlasTileCreated?: never;
        atlasTileDeleted?: never;
        atlasTileUpdated?: never;
        colliderUpdated?: never;
        iframeGameObjectCreated?: never;
        iframeGameObjectDeleted?: never;
        resIsPluginOutdated?: never;
    } | {
        kicked?: never;
        playerListChanged?: never;
        chatAdded?: never;
        characterMoved?: never;
        messageBroadcasted?: never;
        fieldValueSetted?: FieldValueSetted;
        localPluginCreated?: never;
        globalPluginCreated?: never;
        pluginDeleted?: never;
        pluginMessageSent?: never;
        aboutPlugins?: never;
        iframePluginPortMappingCreated?: never;
        iframePluginPortMappingDeleted?: never;
        atlasTileCreated?: never;
        atlasTileDeleted?: never;
        atlasTileUpdated?: never;
        colliderUpdated?: never;
        iframeGameObjectCreated?: never;
        iframeGameObjectDeleted?: never;
        resIsPluginOutdated?: never;
    } | {
        kicked?: never;
        playerListChanged?: never;
        chatAdded?: never;
        characterMoved?: never;
        messageBroadcasted?: never;
        fieldValueSetted?: never;
        localPluginCreated?: LocalPluginCreated;
        globalPluginCreated?: never;
        pluginDeleted?: never;
        pluginMessageSent?: never;
        aboutPlugins?: never;
        iframePluginPortMappingCreated?: never;
        iframePluginPortMappingDeleted?: never;
        atlasTileCreated?: never;
        atlasTileDeleted?: never;
        atlasTileUpdated?: never;
        colliderUpdated?: never;
        iframeGameObjectCreated?: never;
        iframeGameObjectDeleted?: never;
        resIsPluginOutdated?: never;
    } | {
        kicked?: never;
        playerListChanged?: never;
        chatAdded?: never;
        characterMoved?: never;
        messageBroadcasted?: never;
        fieldValueSetted?: never;
        localPluginCreated?: never;
        globalPluginCreated?: GlobalPluginCreated;
        pluginDeleted?: never;
        pluginMessageSent?: never;
        aboutPlugins?: never;
        iframePluginPortMappingCreated?: never;
        iframePluginPortMappingDeleted?: never;
        atlasTileCreated?: never;
        atlasTileDeleted?: never;
        atlasTileUpdated?: never;
        colliderUpdated?: never;
        iframeGameObjectCreated?: never;
        iframeGameObjectDeleted?: never;
        resIsPluginOutdated?: never;
    } | {
        kicked?: never;
        playerListChanged?: never;
        chatAdded?: never;
        characterMoved?: never;
        messageBroadcasted?: never;
        fieldValueSetted?: never;
        localPluginCreated?: never;
        globalPluginCreated?: never;
        pluginDeleted?: PluginDeleted;
        pluginMessageSent?: never;
        aboutPlugins?: never;
        iframePluginPortMappingCreated?: never;
        iframePluginPortMappingDeleted?: never;
        atlasTileCreated?: never;
        atlasTileDeleted?: never;
        atlasTileUpdated?: never;
        colliderUpdated?: never;
        iframeGameObjectCreated?: never;
        iframeGameObjectDeleted?: never;
        resIsPluginOutdated?: never;
    } | {
        kicked?: never;
        playerListChanged?: never;
        chatAdded?: never;
        characterMoved?: never;
        messageBroadcasted?: never;
        fieldValueSetted?: never;
        localPluginCreated?: never;
        globalPluginCreated?: never;
        pluginDeleted?: never;
        pluginMessageSent?: PluginMessageSent;
        aboutPlugins?: never;
        iframePluginPortMappingCreated?: never;
        iframePluginPortMappingDeleted?: never;
        atlasTileCreated?: never;
        atlasTileDeleted?: never;
        atlasTileUpdated?: never;
        colliderUpdated?: never;
        iframeGameObjectCreated?: never;
        iframeGameObjectDeleted?: never;
        resIsPluginOutdated?: never;
    } | {
        kicked?: never;
        playerListChanged?: never;
        chatAdded?: never;
        characterMoved?: never;
        messageBroadcasted?: never;
        fieldValueSetted?: never;
        localPluginCreated?: never;
        globalPluginCreated?: never;
        pluginDeleted?: never;
        pluginMessageSent?: never;
        aboutPlugins?: AboutPlugins;
        iframePluginPortMappingCreated?: never;
        iframePluginPortMappingDeleted?: never;
        atlasTileCreated?: never;
        atlasTileDeleted?: never;
        atlasTileUpdated?: never;
        colliderUpdated?: never;
        iframeGameObjectCreated?: never;
        iframeGameObjectDeleted?: never;
        resIsPluginOutdated?: never;
    } | {
        kicked?: never;
        playerListChanged?: never;
        chatAdded?: never;
        characterMoved?: never;
        messageBroadcasted?: never;
        fieldValueSetted?: never;
        localPluginCreated?: never;
        globalPluginCreated?: never;
        pluginDeleted?: never;
        pluginMessageSent?: never;
        aboutPlugins?: never;
        iframePluginPortMappingCreated?: IframePluginPortMappingCreated;
        iframePluginPortMappingDeleted?: never;
        atlasTileCreated?: never;
        atlasTileDeleted?: never;
        atlasTileUpdated?: never;
        colliderUpdated?: never;
        iframeGameObjectCreated?: never;
        iframeGameObjectDeleted?: never;
        resIsPluginOutdated?: never;
    } | {
        kicked?: never;
        playerListChanged?: never;
        chatAdded?: never;
        characterMoved?: never;
        messageBroadcasted?: never;
        fieldValueSetted?: never;
        localPluginCreated?: never;
        globalPluginCreated?: never;
        pluginDeleted?: never;
        pluginMessageSent?: never;
        aboutPlugins?: never;
        iframePluginPortMappingCreated?: never;
        iframePluginPortMappingDeleted?: IframePluginPortMappingDeleted;
        atlasTileCreated?: never;
        atlasTileDeleted?: never;
        atlasTileUpdated?: never;
        colliderUpdated?: never;
        iframeGameObjectCreated?: never;
        iframeGameObjectDeleted?: never;
        resIsPluginOutdated?: never;
    } | {
        kicked?: never;
        playerListChanged?: never;
        chatAdded?: never;
        characterMoved?: never;
        messageBroadcasted?: never;
        fieldValueSetted?: never;
        localPluginCreated?: never;
        globalPluginCreated?: never;
        pluginDeleted?: never;
        pluginMessageSent?: never;
        aboutPlugins?: never;
        iframePluginPortMappingCreated?: never;
        iframePluginPortMappingDeleted?: never;
        atlasTileCreated?: AtlasTileCreated;
        atlasTileDeleted?: never;
        atlasTileUpdated?: never;
        colliderUpdated?: never;
        iframeGameObjectCreated?: never;
        iframeGameObjectDeleted?: never;
        resIsPluginOutdated?: never;
    } | {
        kicked?: never;
        playerListChanged?: never;
        chatAdded?: never;
        characterMoved?: never;
        messageBroadcasted?: never;
        fieldValueSetted?: never;
        localPluginCreated?: never;
        globalPluginCreated?: never;
        pluginDeleted?: never;
        pluginMessageSent?: never;
        aboutPlugins?: never;
        iframePluginPortMappingCreated?: never;
        iframePluginPortMappingDeleted?: never;
        atlasTileCreated?: never;
        atlasTileDeleted?: AtlasTileDeleted;
        atlasTileUpdated?: never;
        colliderUpdated?: never;
        iframeGameObjectCreated?: never;
        iframeGameObjectDeleted?: never;
        resIsPluginOutdated?: never;
    } | {
        kicked?: never;
        playerListChanged?: never;
        chatAdded?: never;
        characterMoved?: never;
        messageBroadcasted?: never;
        fieldValueSetted?: never;
        localPluginCreated?: never;
        globalPluginCreated?: never;
        pluginDeleted?: never;
        pluginMessageSent?: never;
        aboutPlugins?: never;
        iframePluginPortMappingCreated?: never;
        iframePluginPortMappingDeleted?: never;
        atlasTileCreated?: never;
        atlasTileDeleted?: never;
        atlasTileUpdated?: AtlasTileUpdated;
        colliderUpdated?: never;
        iframeGameObjectCreated?: never;
        iframeGameObjectDeleted?: never;
        resIsPluginOutdated?: never;
    } | {
        kicked?: never;
        playerListChanged?: never;
        chatAdded?: never;
        characterMoved?: never;
        messageBroadcasted?: never;
        fieldValueSetted?: never;
        localPluginCreated?: never;
        globalPluginCreated?: never;
        pluginDeleted?: never;
        pluginMessageSent?: never;
        aboutPlugins?: never;
        iframePluginPortMappingCreated?: never;
        iframePluginPortMappingDeleted?: never;
        atlasTileCreated?: never;
        atlasTileDeleted?: never;
        atlasTileUpdated?: never;
        colliderUpdated?: ColliderUpdated;
        iframeGameObjectCreated?: never;
        iframeGameObjectDeleted?: never;
        resIsPluginOutdated?: never;
    } | {
        kicked?: never;
        playerListChanged?: never;
        chatAdded?: never;
        characterMoved?: never;
        messageBroadcasted?: never;
        fieldValueSetted?: never;
        localPluginCreated?: never;
        globalPluginCreated?: never;
        pluginDeleted?: never;
        pluginMessageSent?: never;
        aboutPlugins?: never;
        iframePluginPortMappingCreated?: never;
        iframePluginPortMappingDeleted?: never;
        atlasTileCreated?: never;
        atlasTileDeleted?: never;
        atlasTileUpdated?: never;
        colliderUpdated?: never;
        iframeGameObjectCreated?: IframeGameObjectCreated;
        iframeGameObjectDeleted?: never;
        resIsPluginOutdated?: never;
    } | {
        kicked?: never;
        playerListChanged?: never;
        chatAdded?: never;
        characterMoved?: never;
        messageBroadcasted?: never;
        fieldValueSetted?: never;
        localPluginCreated?: never;
        globalPluginCreated?: never;
        pluginDeleted?: never;
        pluginMessageSent?: never;
        aboutPlugins?: never;
        iframePluginPortMappingCreated?: never;
        iframePluginPortMappingDeleted?: never;
        atlasTileCreated?: never;
        atlasTileDeleted?: never;
        atlasTileUpdated?: never;
        colliderUpdated?: never;
        iframeGameObjectCreated?: never;
        iframeGameObjectDeleted?: IframeGameObjectDeleted;
        resIsPluginOutdated?: never;
    } | {
        kicked?: never;
        playerListChanged?: never;
        chatAdded?: never;
        characterMoved?: never;
        messageBroadcasted?: never;
        fieldValueSetted?: never;
        localPluginCreated?: never;
        globalPluginCreated?: never;
        pluginDeleted?: never;
        pluginMessageSent?: never;
        aboutPlugins?: never;
        iframePluginPortMappingCreated?: never;
        iframePluginPortMappingDeleted?: never;
        atlasTileCreated?: never;
        atlasTileDeleted?: never;
        atlasTileUpdated?: never;
        colliderUpdated?: never;
        iframeGameObjectCreated?: never;
        iframeGameObjectDeleted?: never;
        resIsPluginOutdated?: ResIsPluginOutdated;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("kicked" in data && data.kicked != undefined) {
                this.kicked = data.kicked;
            }
            if ("playerListChanged" in data && data.playerListChanged != undefined) {
                this.playerListChanged = data.playerListChanged;
            }
            if ("chatAdded" in data && data.chatAdded != undefined) {
                this.chatAdded = data.chatAdded;
            }
            if ("characterMoved" in data && data.characterMoved != undefined) {
                this.characterMoved = data.characterMoved;
            }
            if ("messageBroadcasted" in data && data.messageBroadcasted != undefined) {
                this.messageBroadcasted = data.messageBroadcasted;
            }
            if ("fieldValueSetted" in data && data.fieldValueSetted != undefined) {
                this.fieldValueSetted = data.fieldValueSetted;
            }
            if ("localPluginCreated" in data && data.localPluginCreated != undefined) {
                this.localPluginCreated = data.localPluginCreated;
            }
            if ("globalPluginCreated" in data && data.globalPluginCreated != undefined) {
                this.globalPluginCreated = data.globalPluginCreated;
            }
            if ("pluginDeleted" in data && data.pluginDeleted != undefined) {
                this.pluginDeleted = data.pluginDeleted;
            }
            if ("pluginMessageSent" in data && data.pluginMessageSent != undefined) {
                this.pluginMessageSent = data.pluginMessageSent;
            }
            if ("aboutPlugins" in data && data.aboutPlugins != undefined) {
                this.aboutPlugins = data.aboutPlugins;
            }
            if ("iframePluginPortMappingCreated" in data && data.iframePluginPortMappingCreated != undefined) {
                this.iframePluginPortMappingCreated = data.iframePluginPortMappingCreated;
            }
            if ("iframePluginPortMappingDeleted" in data && data.iframePluginPortMappingDeleted != undefined) {
                this.iframePluginPortMappingDeleted = data.iframePluginPortMappingDeleted;
            }
            if ("atlasTileCreated" in data && data.atlasTileCreated != undefined) {
                this.atlasTileCreated = data.atlasTileCreated;
            }
            if ("atlasTileDeleted" in data && data.atlasTileDeleted != undefined) {
                this.atlasTileDeleted = data.atlasTileDeleted;
            }
            if ("atlasTileUpdated" in data && data.atlasTileUpdated != undefined) {
                this.atlasTileUpdated = data.atlasTileUpdated;
            }
            if ("colliderUpdated" in data && data.colliderUpdated != undefined) {
                this.colliderUpdated = data.colliderUpdated;
            }
            if ("iframeGameObjectCreated" in data && data.iframeGameObjectCreated != undefined) {
                this.iframeGameObjectCreated = data.iframeGameObjectCreated;
            }
            if ("iframeGameObjectDeleted" in data && data.iframeGameObjectDeleted != undefined) {
                this.iframeGameObjectDeleted = data.iframeGameObjectDeleted;
            }
            if ("resIsPluginOutdated" in data && data.resIsPluginOutdated != undefined) {
                this.resIsPluginOutdated = data.resIsPluginOutdated;
            }
        }
    }
    get kicked() {
        return pb_1.Message.getWrapperField(this, Kicked, 1) as Kicked;
    }
    set kicked(value: Kicked) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get has_kicked() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get playerListChanged() {
        return pb_1.Message.getWrapperField(this, PlayerListChanged, 2) as PlayerListChanged;
    }
    set playerListChanged(value: PlayerListChanged) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get has_playerListChanged() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get chatAdded() {
        return pb_1.Message.getWrapperField(this, ChatAdded, 3) as ChatAdded;
    }
    set chatAdded(value: ChatAdded) {
        pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
    }
    get has_chatAdded() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get characterMoved() {
        return pb_1.Message.getWrapperField(this, CharacterMoved, 4) as CharacterMoved;
    }
    set characterMoved(value: CharacterMoved) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
    }
    get has_characterMoved() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get messageBroadcasted() {
        return pb_1.Message.getWrapperField(this, MessageBroadcasted, 5) as MessageBroadcasted;
    }
    set messageBroadcasted(value: MessageBroadcasted) {
        pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
    }
    get has_messageBroadcasted() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get fieldValueSetted() {
        return pb_1.Message.getWrapperField(this, FieldValueSetted, 6) as FieldValueSetted;
    }
    set fieldValueSetted(value: FieldValueSetted) {
        pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
    }
    get has_fieldValueSetted() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get localPluginCreated() {
        return pb_1.Message.getWrapperField(this, LocalPluginCreated, 7) as LocalPluginCreated;
    }
    set localPluginCreated(value: LocalPluginCreated) {
        pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
    }
    get has_localPluginCreated() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get globalPluginCreated() {
        return pb_1.Message.getWrapperField(this, GlobalPluginCreated, 8) as GlobalPluginCreated;
    }
    set globalPluginCreated(value: GlobalPluginCreated) {
        pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
    }
    get has_globalPluginCreated() {
        return pb_1.Message.getField(this, 8) != null;
    }
    get pluginDeleted() {
        return pb_1.Message.getWrapperField(this, PluginDeleted, 9) as PluginDeleted;
    }
    set pluginDeleted(value: PluginDeleted) {
        pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
    }
    get has_pluginDeleted() {
        return pb_1.Message.getField(this, 9) != null;
    }
    get pluginMessageSent() {
        return pb_1.Message.getWrapperField(this, PluginMessageSent, 10) as PluginMessageSent;
    }
    set pluginMessageSent(value: PluginMessageSent) {
        pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
    }
    get has_pluginMessageSent() {
        return pb_1.Message.getField(this, 10) != null;
    }
    get aboutPlugins() {
        return pb_1.Message.getWrapperField(this, AboutPlugins, 11) as AboutPlugins;
    }
    set aboutPlugins(value: AboutPlugins) {
        pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
    }
    get has_aboutPlugins() {
        return pb_1.Message.getField(this, 11) != null;
    }
    get iframePluginPortMappingCreated() {
        return pb_1.Message.getWrapperField(this, IframePluginPortMappingCreated, 12) as IframePluginPortMappingCreated;
    }
    set iframePluginPortMappingCreated(value: IframePluginPortMappingCreated) {
        pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
    }
    get has_iframePluginPortMappingCreated() {
        return pb_1.Message.getField(this, 12) != null;
    }
    get iframePluginPortMappingDeleted() {
        return pb_1.Message.getWrapperField(this, IframePluginPortMappingDeleted, 13) as IframePluginPortMappingDeleted;
    }
    set iframePluginPortMappingDeleted(value: IframePluginPortMappingDeleted) {
        pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
    }
    get has_iframePluginPortMappingDeleted() {
        return pb_1.Message.getField(this, 13) != null;
    }
    get atlasTileCreated() {
        return pb_1.Message.getWrapperField(this, AtlasTileCreated, 14) as AtlasTileCreated;
    }
    set atlasTileCreated(value: AtlasTileCreated) {
        pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
    }
    get has_atlasTileCreated() {
        return pb_1.Message.getField(this, 14) != null;
    }
    get atlasTileDeleted() {
        return pb_1.Message.getWrapperField(this, AtlasTileDeleted, 15) as AtlasTileDeleted;
    }
    set atlasTileDeleted(value: AtlasTileDeleted) {
        pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[0], value);
    }
    get has_atlasTileDeleted() {
        return pb_1.Message.getField(this, 15) != null;
    }
    get atlasTileUpdated() {
        return pb_1.Message.getWrapperField(this, AtlasTileUpdated, 16) as AtlasTileUpdated;
    }
    set atlasTileUpdated(value: AtlasTileUpdated) {
        pb_1.Message.setOneofWrapperField(this, 16, this.#one_of_decls[0], value);
    }
    get has_atlasTileUpdated() {
        return pb_1.Message.getField(this, 16) != null;
    }
    get colliderUpdated() {
        return pb_1.Message.getWrapperField(this, ColliderUpdated, 17) as ColliderUpdated;
    }
    set colliderUpdated(value: ColliderUpdated) {
        pb_1.Message.setOneofWrapperField(this, 17, this.#one_of_decls[0], value);
    }
    get has_colliderUpdated() {
        return pb_1.Message.getField(this, 17) != null;
    }
    get iframeGameObjectCreated() {
        return pb_1.Message.getWrapperField(this, IframeGameObjectCreated, 18) as IframeGameObjectCreated;
    }
    set iframeGameObjectCreated(value: IframeGameObjectCreated) {
        pb_1.Message.setOneofWrapperField(this, 18, this.#one_of_decls[0], value);
    }
    get has_iframeGameObjectCreated() {
        return pb_1.Message.getField(this, 18) != null;
    }
    get iframeGameObjectDeleted() {
        return pb_1.Message.getWrapperField(this, IframeGameObjectDeleted, 19) as IframeGameObjectDeleted;
    }
    set iframeGameObjectDeleted(value: IframeGameObjectDeleted) {
        pb_1.Message.setOneofWrapperField(this, 19, this.#one_of_decls[0], value);
    }
    get has_iframeGameObjectDeleted() {
        return pb_1.Message.getField(this, 19) != null;
    }
    get resIsPluginOutdated() {
        return pb_1.Message.getWrapperField(this, ResIsPluginOutdated, 20) as ResIsPluginOutdated;
    }
    set resIsPluginOutdated(value: ResIsPluginOutdated) {
        pb_1.Message.setOneofWrapperField(this, 20, this.#one_of_decls[0], value);
    }
    get has_resIsPluginOutdated() {
        return pb_1.Message.getField(this, 20) != null;
    }
    get event() {
        const cases: {
            [index: number]: "none" | "kicked" | "playerListChanged" | "chatAdded" | "characterMoved" | "messageBroadcasted" | "fieldValueSetted" | "localPluginCreated" | "globalPluginCreated" | "pluginDeleted" | "pluginMessageSent" | "aboutPlugins" | "iframePluginPortMappingCreated" | "iframePluginPortMappingDeleted" | "atlasTileCreated" | "atlasTileDeleted" | "atlasTileUpdated" | "colliderUpdated" | "iframeGameObjectCreated" | "iframeGameObjectDeleted" | "resIsPluginOutdated";
        } = {
            0: "none",
            1: "kicked",
            2: "playerListChanged",
            3: "chatAdded",
            4: "characterMoved",
            5: "messageBroadcasted",
            6: "fieldValueSetted",
            7: "localPluginCreated",
            8: "globalPluginCreated",
            9: "pluginDeleted",
            10: "pluginMessageSent",
            11: "aboutPlugins",
            12: "iframePluginPortMappingCreated",
            13: "iframePluginPortMappingDeleted",
            14: "atlasTileCreated",
            15: "atlasTileDeleted",
            16: "atlasTileUpdated",
            17: "colliderUpdated",
            18: "iframeGameObjectCreated",
            19: "iframeGameObjectDeleted",
            20: "resIsPluginOutdated"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])];
    }
    static fromObject(data: {
        kicked?: ReturnType<typeof Kicked.prototype.toObject>;
        playerListChanged?: ReturnType<typeof PlayerListChanged.prototype.toObject>;
        chatAdded?: ReturnType<typeof ChatAdded.prototype.toObject>;
        characterMoved?: ReturnType<typeof CharacterMoved.prototype.toObject>;
        messageBroadcasted?: ReturnType<typeof MessageBroadcasted.prototype.toObject>;
        fieldValueSetted?: ReturnType<typeof FieldValueSetted.prototype.toObject>;
        localPluginCreated?: ReturnType<typeof LocalPluginCreated.prototype.toObject>;
        globalPluginCreated?: ReturnType<typeof GlobalPluginCreated.prototype.toObject>;
        pluginDeleted?: ReturnType<typeof PluginDeleted.prototype.toObject>;
        pluginMessageSent?: ReturnType<typeof PluginMessageSent.prototype.toObject>;
        aboutPlugins?: ReturnType<typeof AboutPlugins.prototype.toObject>;
        iframePluginPortMappingCreated?: ReturnType<typeof IframePluginPortMappingCreated.prototype.toObject>;
        iframePluginPortMappingDeleted?: ReturnType<typeof IframePluginPortMappingDeleted.prototype.toObject>;
        atlasTileCreated?: ReturnType<typeof AtlasTileCreated.prototype.toObject>;
        atlasTileDeleted?: ReturnType<typeof AtlasTileDeleted.prototype.toObject>;
        atlasTileUpdated?: ReturnType<typeof AtlasTileUpdated.prototype.toObject>;
        colliderUpdated?: ReturnType<typeof ColliderUpdated.prototype.toObject>;
        iframeGameObjectCreated?: ReturnType<typeof IframeGameObjectCreated.prototype.toObject>;
        iframeGameObjectDeleted?: ReturnType<typeof IframeGameObjectDeleted.prototype.toObject>;
        resIsPluginOutdated?: ReturnType<typeof ResIsPluginOutdated.prototype.toObject>;
    }): ServerEvent {
        const message = new ServerEvent({});
        if (data.kicked != null) {
            message.kicked = Kicked.fromObject(data.kicked);
        }
        if (data.playerListChanged != null) {
            message.playerListChanged = PlayerListChanged.fromObject(data.playerListChanged);
        }
        if (data.chatAdded != null) {
            message.chatAdded = ChatAdded.fromObject(data.chatAdded);
        }
        if (data.characterMoved != null) {
            message.characterMoved = CharacterMoved.fromObject(data.characterMoved);
        }
        if (data.messageBroadcasted != null) {
            message.messageBroadcasted = MessageBroadcasted.fromObject(data.messageBroadcasted);
        }
        if (data.fieldValueSetted != null) {
            message.fieldValueSetted = FieldValueSetted.fromObject(data.fieldValueSetted);
        }
        if (data.localPluginCreated != null) {
            message.localPluginCreated = LocalPluginCreated.fromObject(data.localPluginCreated);
        }
        if (data.globalPluginCreated != null) {
            message.globalPluginCreated = GlobalPluginCreated.fromObject(data.globalPluginCreated);
        }
        if (data.pluginDeleted != null) {
            message.pluginDeleted = PluginDeleted.fromObject(data.pluginDeleted);
        }
        if (data.pluginMessageSent != null) {
            message.pluginMessageSent = PluginMessageSent.fromObject(data.pluginMessageSent);
        }
        if (data.aboutPlugins != null) {
            message.aboutPlugins = AboutPlugins.fromObject(data.aboutPlugins);
        }
        if (data.iframePluginPortMappingCreated != null) {
            message.iframePluginPortMappingCreated = IframePluginPortMappingCreated.fromObject(data.iframePluginPortMappingCreated);
        }
        if (data.iframePluginPortMappingDeleted != null) {
            message.iframePluginPortMappingDeleted = IframePluginPortMappingDeleted.fromObject(data.iframePluginPortMappingDeleted);
        }
        if (data.atlasTileCreated != null) {
            message.atlasTileCreated = AtlasTileCreated.fromObject(data.atlasTileCreated);
        }
        if (data.atlasTileDeleted != null) {
            message.atlasTileDeleted = AtlasTileDeleted.fromObject(data.atlasTileDeleted);
        }
        if (data.atlasTileUpdated != null) {
            message.atlasTileUpdated = AtlasTileUpdated.fromObject(data.atlasTileUpdated);
        }
        if (data.colliderUpdated != null) {
            message.colliderUpdated = ColliderUpdated.fromObject(data.colliderUpdated);
        }
        if (data.iframeGameObjectCreated != null) {
            message.iframeGameObjectCreated = IframeGameObjectCreated.fromObject(data.iframeGameObjectCreated);
        }
        if (data.iframeGameObjectDeleted != null) {
            message.iframeGameObjectDeleted = IframeGameObjectDeleted.fromObject(data.iframeGameObjectDeleted);
        }
        if (data.resIsPluginOutdated != null) {
            message.resIsPluginOutdated = ResIsPluginOutdated.fromObject(data.resIsPluginOutdated);
        }
        return message;
    }
    toObject() {
        const data: {
            kicked?: ReturnType<typeof Kicked.prototype.toObject>;
            playerListChanged?: ReturnType<typeof PlayerListChanged.prototype.toObject>;
            chatAdded?: ReturnType<typeof ChatAdded.prototype.toObject>;
            characterMoved?: ReturnType<typeof CharacterMoved.prototype.toObject>;
            messageBroadcasted?: ReturnType<typeof MessageBroadcasted.prototype.toObject>;
            fieldValueSetted?: ReturnType<typeof FieldValueSetted.prototype.toObject>;
            localPluginCreated?: ReturnType<typeof LocalPluginCreated.prototype.toObject>;
            globalPluginCreated?: ReturnType<typeof GlobalPluginCreated.prototype.toObject>;
            pluginDeleted?: ReturnType<typeof PluginDeleted.prototype.toObject>;
            pluginMessageSent?: ReturnType<typeof PluginMessageSent.prototype.toObject>;
            aboutPlugins?: ReturnType<typeof AboutPlugins.prototype.toObject>;
            iframePluginPortMappingCreated?: ReturnType<typeof IframePluginPortMappingCreated.prototype.toObject>;
            iframePluginPortMappingDeleted?: ReturnType<typeof IframePluginPortMappingDeleted.prototype.toObject>;
            atlasTileCreated?: ReturnType<typeof AtlasTileCreated.prototype.toObject>;
            atlasTileDeleted?: ReturnType<typeof AtlasTileDeleted.prototype.toObject>;
            atlasTileUpdated?: ReturnType<typeof AtlasTileUpdated.prototype.toObject>;
            colliderUpdated?: ReturnType<typeof ColliderUpdated.prototype.toObject>;
            iframeGameObjectCreated?: ReturnType<typeof IframeGameObjectCreated.prototype.toObject>;
            iframeGameObjectDeleted?: ReturnType<typeof IframeGameObjectDeleted.prototype.toObject>;
            resIsPluginOutdated?: ReturnType<typeof ResIsPluginOutdated.prototype.toObject>;
        } = {};
        if (this.kicked != null) {
            data.kicked = this.kicked.toObject();
        }
        if (this.playerListChanged != null) {
            data.playerListChanged = this.playerListChanged.toObject();
        }
        if (this.chatAdded != null) {
            data.chatAdded = this.chatAdded.toObject();
        }
        if (this.characterMoved != null) {
            data.characterMoved = this.characterMoved.toObject();
        }
        if (this.messageBroadcasted != null) {
            data.messageBroadcasted = this.messageBroadcasted.toObject();
        }
        if (this.fieldValueSetted != null) {
            data.fieldValueSetted = this.fieldValueSetted.toObject();
        }
        if (this.localPluginCreated != null) {
            data.localPluginCreated = this.localPluginCreated.toObject();
        }
        if (this.globalPluginCreated != null) {
            data.globalPluginCreated = this.globalPluginCreated.toObject();
        }
        if (this.pluginDeleted != null) {
            data.pluginDeleted = this.pluginDeleted.toObject();
        }
        if (this.pluginMessageSent != null) {
            data.pluginMessageSent = this.pluginMessageSent.toObject();
        }
        if (this.aboutPlugins != null) {
            data.aboutPlugins = this.aboutPlugins.toObject();
        }
        if (this.iframePluginPortMappingCreated != null) {
            data.iframePluginPortMappingCreated = this.iframePluginPortMappingCreated.toObject();
        }
        if (this.iframePluginPortMappingDeleted != null) {
            data.iframePluginPortMappingDeleted = this.iframePluginPortMappingDeleted.toObject();
        }
        if (this.atlasTileCreated != null) {
            data.atlasTileCreated = this.atlasTileCreated.toObject();
        }
        if (this.atlasTileDeleted != null) {
            data.atlasTileDeleted = this.atlasTileDeleted.toObject();
        }
        if (this.atlasTileUpdated != null) {
            data.atlasTileUpdated = this.atlasTileUpdated.toObject();
        }
        if (this.colliderUpdated != null) {
            data.colliderUpdated = this.colliderUpdated.toObject();
        }
        if (this.iframeGameObjectCreated != null) {
            data.iframeGameObjectCreated = this.iframeGameObjectCreated.toObject();
        }
        if (this.iframeGameObjectDeleted != null) {
            data.iframeGameObjectDeleted = this.iframeGameObjectDeleted.toObject();
        }
        if (this.resIsPluginOutdated != null) {
            data.resIsPluginOutdated = this.resIsPluginOutdated.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_kicked)
            writer.writeMessage(1, this.kicked, () => this.kicked.serialize(writer));
        if (this.has_playerListChanged)
            writer.writeMessage(2, this.playerListChanged, () => this.playerListChanged.serialize(writer));
        if (this.has_chatAdded)
            writer.writeMessage(3, this.chatAdded, () => this.chatAdded.serialize(writer));
        if (this.has_characterMoved)
            writer.writeMessage(4, this.characterMoved, () => this.characterMoved.serialize(writer));
        if (this.has_messageBroadcasted)
            writer.writeMessage(5, this.messageBroadcasted, () => this.messageBroadcasted.serialize(writer));
        if (this.has_fieldValueSetted)
            writer.writeMessage(6, this.fieldValueSetted, () => this.fieldValueSetted.serialize(writer));
        if (this.has_localPluginCreated)
            writer.writeMessage(7, this.localPluginCreated, () => this.localPluginCreated.serialize(writer));
        if (this.has_globalPluginCreated)
            writer.writeMessage(8, this.globalPluginCreated, () => this.globalPluginCreated.serialize(writer));
        if (this.has_pluginDeleted)
            writer.writeMessage(9, this.pluginDeleted, () => this.pluginDeleted.serialize(writer));
        if (this.has_pluginMessageSent)
            writer.writeMessage(10, this.pluginMessageSent, () => this.pluginMessageSent.serialize(writer));
        if (this.has_aboutPlugins)
            writer.writeMessage(11, this.aboutPlugins, () => this.aboutPlugins.serialize(writer));
        if (this.has_iframePluginPortMappingCreated)
            writer.writeMessage(12, this.iframePluginPortMappingCreated, () => this.iframePluginPortMappingCreated.serialize(writer));
        if (this.has_iframePluginPortMappingDeleted)
            writer.writeMessage(13, this.iframePluginPortMappingDeleted, () => this.iframePluginPortMappingDeleted.serialize(writer));
        if (this.has_atlasTileCreated)
            writer.writeMessage(14, this.atlasTileCreated, () => this.atlasTileCreated.serialize(writer));
        if (this.has_atlasTileDeleted)
            writer.writeMessage(15, this.atlasTileDeleted, () => this.atlasTileDeleted.serialize(writer));
        if (this.has_atlasTileUpdated)
            writer.writeMessage(16, this.atlasTileUpdated, () => this.atlasTileUpdated.serialize(writer));
        if (this.has_colliderUpdated)
            writer.writeMessage(17, this.colliderUpdated, () => this.colliderUpdated.serialize(writer));
        if (this.has_iframeGameObjectCreated)
            writer.writeMessage(18, this.iframeGameObjectCreated, () => this.iframeGameObjectCreated.serialize(writer));
        if (this.has_iframeGameObjectDeleted)
            writer.writeMessage(19, this.iframeGameObjectDeleted, () => this.iframeGameObjectDeleted.serialize(writer));
        if (this.has_resIsPluginOutdated)
            writer.writeMessage(20, this.resIsPluginOutdated, () => this.resIsPluginOutdated.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ServerEvent {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ServerEvent();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.kicked, () => message.kicked = Kicked.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.playerListChanged, () => message.playerListChanged = PlayerListChanged.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.chatAdded, () => message.chatAdded = ChatAdded.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.characterMoved, () => message.characterMoved = CharacterMoved.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.messageBroadcasted, () => message.messageBroadcasted = MessageBroadcasted.deserialize(reader));
                    break;
                case 6:
                    reader.readMessage(message.fieldValueSetted, () => message.fieldValueSetted = FieldValueSetted.deserialize(reader));
                    break;
                case 7:
                    reader.readMessage(message.localPluginCreated, () => message.localPluginCreated = LocalPluginCreated.deserialize(reader));
                    break;
                case 8:
                    reader.readMessage(message.globalPluginCreated, () => message.globalPluginCreated = GlobalPluginCreated.deserialize(reader));
                    break;
                case 9:
                    reader.readMessage(message.pluginDeleted, () => message.pluginDeleted = PluginDeleted.deserialize(reader));
                    break;
                case 10:
                    reader.readMessage(message.pluginMessageSent, () => message.pluginMessageSent = PluginMessageSent.deserialize(reader));
                    break;
                case 11:
                    reader.readMessage(message.aboutPlugins, () => message.aboutPlugins = AboutPlugins.deserialize(reader));
                    break;
                case 12:
                    reader.readMessage(message.iframePluginPortMappingCreated, () => message.iframePluginPortMappingCreated = IframePluginPortMappingCreated.deserialize(reader));
                    break;
                case 13:
                    reader.readMessage(message.iframePluginPortMappingDeleted, () => message.iframePluginPortMappingDeleted = IframePluginPortMappingDeleted.deserialize(reader));
                    break;
                case 14:
                    reader.readMessage(message.atlasTileCreated, () => message.atlasTileCreated = AtlasTileCreated.deserialize(reader));
                    break;
                case 15:
                    reader.readMessage(message.atlasTileDeleted, () => message.atlasTileDeleted = AtlasTileDeleted.deserialize(reader));
                    break;
                case 16:
                    reader.readMessage(message.atlasTileUpdated, () => message.atlasTileUpdated = AtlasTileUpdated.deserialize(reader));
                    break;
                case 17:
                    reader.readMessage(message.colliderUpdated, () => message.colliderUpdated = ColliderUpdated.deserialize(reader));
                    break;
                case 18:
                    reader.readMessage(message.iframeGameObjectCreated, () => message.iframeGameObjectCreated = IframeGameObjectCreated.deserialize(reader));
                    break;
                case 19:
                    reader.readMessage(message.iframeGameObjectDeleted, () => message.iframeGameObjectDeleted = IframeGameObjectDeleted.deserialize(reader));
                    break;
                case 20:
                    reader.readMessage(message.resIsPluginOutdated, () => message.resIsPluginOutdated = ResIsPluginOutdated.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ServerEvent {
        return ServerEvent.deserialize(bytes);
    }
}
export class User extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        nickname?: string;
        skinSrc?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("nickname" in data && data.nickname != undefined) {
                this.nickname = data.nickname;
            }
            if ("skinSrc" in data && data.skinSrc != undefined) {
                this.skinSrc = data.skinSrc;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get nickname() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set nickname(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get skinSrc() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set skinSrc(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        id?: string;
        nickname?: string;
        skinSrc?: string;
    }): User {
        const message = new User({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.nickname != null) {
            message.nickname = data.nickname;
        }
        if (data.skinSrc != null) {
            message.skinSrc = data.skinSrc;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            nickname?: string;
            skinSrc?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.nickname != null) {
            data.nickname = this.nickname;
        }
        if (this.skinSrc != null) {
            data.skinSrc = this.skinSrc;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.nickname.length)
            writer.writeString(2, this.nickname);
        if (this.skinSrc.length)
            writer.writeString(3, this.skinSrc);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): User {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new User();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.nickname = reader.readString();
                    break;
                case 3:
                    message.skinSrc = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): User {
        return User.deserialize(bytes);
    }
}
export class Kicked extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): Kicked {
        const message = new Kicked({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Kicked {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Kicked();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Kicked {
        return Kicked.deserialize(bytes);
    }
}
export class PlayerListChanged extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        playerInfos?: PlayerListChanged.PlayerInfo[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("playerInfos" in data && data.playerInfos != undefined) {
                this.playerInfos = data.playerInfos;
            }
        }
    }
    get playerInfos() {
        return pb_1.Message.getRepeatedWrapperField(this, PlayerListChanged.PlayerInfo, 1) as PlayerListChanged.PlayerInfo[];
    }
    set playerInfos(value: PlayerListChanged.PlayerInfo[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        playerInfos?: ReturnType<typeof PlayerListChanged.PlayerInfo.prototype.toObject>[];
    }): PlayerListChanged {
        const message = new PlayerListChanged({});
        if (data.playerInfos != null) {
            message.playerInfos = data.playerInfos.map(item => PlayerListChanged.PlayerInfo.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            playerInfos?: ReturnType<typeof PlayerListChanged.PlayerInfo.prototype.toObject>[];
        } = {};
        if (this.playerInfos != null) {
            data.playerInfos = this.playerInfos.map((item: PlayerListChanged.PlayerInfo) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.playerInfos.length)
            writer.writeRepeatedMessage(1, this.playerInfos, (item: PlayerListChanged.PlayerInfo) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlayerListChanged {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerListChanged();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.playerInfos, () => pb_1.Message.addToRepeatedWrapperField(message, 1, PlayerListChanged.PlayerInfo.deserialize(reader), PlayerListChanged.PlayerInfo));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PlayerListChanged {
        return PlayerListChanged.deserialize(bytes);
    }
}
export namespace PlayerListChanged {
    export class PlayerInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            x?: number;
            y?: number;
            user?: User;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("x" in data && data.x != undefined) {
                    this.x = data.x;
                }
                if ("y" in data && data.y != undefined) {
                    this.y = data.y;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
            }
        }
        get x() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set x(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get y() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set y(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get user() {
            return pb_1.Message.getWrapperField(this, User, 3) as User;
        }
        set user(value: User) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            x?: number;
            y?: number;
            user?: ReturnType<typeof User.prototype.toObject>;
        }): PlayerInfo {
            const message = new PlayerInfo({});
            if (data.x != null) {
                message.x = data.x;
            }
            if (data.y != null) {
                message.y = data.y;
            }
            if (data.user != null) {
                message.user = User.fromObject(data.user);
            }
            return message;
        }
        toObject() {
            const data: {
                x?: number;
                y?: number;
                user?: ReturnType<typeof User.prototype.toObject>;
            } = {};
            if (this.x != null) {
                data.x = this.x;
            }
            if (this.y != null) {
                data.y = this.y;
            }
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.x != 0)
                writer.writeInt32(1, this.x);
            if (this.y != 0)
                writer.writeInt32(2, this.y);
            if (this.has_user)
                writer.writeMessage(3, this.user, () => this.user.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlayerInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.x = reader.readInt32();
                        break;
                    case 2:
                        message.y = reader.readInt32();
                        break;
                    case 3:
                        reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PlayerInfo {
            return PlayerInfo.deserialize(bytes);
        }
    }
}
export class ChatAdded extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        message?: string;
        user?: User;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("user" in data && data.user != undefined) {
                this.user = data.user;
            }
        }
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get user() {
        return pb_1.Message.getWrapperField(this, User, 2) as User;
    }
    set user(value: User) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_user() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        message?: string;
        user?: ReturnType<typeof User.prototype.toObject>;
    }): ChatAdded {
        const message = new ChatAdded({});
        if (data.message != null) {
            message.message = data.message;
        }
        if (data.user != null) {
            message.user = User.fromObject(data.user);
        }
        return message;
    }
    toObject() {
        const data: {
            message?: string;
            user?: ReturnType<typeof User.prototype.toObject>;
        } = {};
        if (this.message != null) {
            data.message = this.message;
        }
        if (this.user != null) {
            data.user = this.user.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.message.length)
            writer.writeString(1, this.message);
        if (this.has_user)
            writer.writeMessage(2, this.user, () => this.user.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatAdded {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatAdded();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.message = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ChatAdded {
        return ChatAdded.deserialize(bytes);
    }
}
export class CharacterMoved extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        x?: number;
        y?: number;
        userId?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("x" in data && data.x != undefined) {
                this.x = data.x;
            }
            if ("y" in data && data.y != undefined) {
                this.y = data.y;
            }
            if ("userId" in data && data.userId != undefined) {
                this.userId = data.userId;
            }
        }
    }
    get x() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set x(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get y() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set y(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get userId() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set userId(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        x?: number;
        y?: number;
        userId?: string;
    }): CharacterMoved {
        const message = new CharacterMoved({});
        if (data.x != null) {
            message.x = data.x;
        }
        if (data.y != null) {
            message.y = data.y;
        }
        if (data.userId != null) {
            message.userId = data.userId;
        }
        return message;
    }
    toObject() {
        const data: {
            x?: number;
            y?: number;
            userId?: string;
        } = {};
        if (this.x != null) {
            data.x = this.x;
        }
        if (this.y != null) {
            data.y = this.y;
        }
        if (this.userId != null) {
            data.userId = this.userId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.x != 0)
            writer.writeInt32(1, this.x);
        if (this.y != 0)
            writer.writeInt32(2, this.y);
        if (this.userId.length)
            writer.writeString(3, this.userId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CharacterMoved {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CharacterMoved();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.x = reader.readInt32();
                    break;
                case 2:
                    message.y = reader.readInt32();
                    break;
                case 3:
                    message.userId = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CharacterMoved {
        return CharacterMoved.deserialize(bytes);
    }
}
export class MessageBroadcasted extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        message?: string;
        userId?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("userId" in data && data.userId != undefined) {
                this.userId = data.userId;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get userId() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set userId(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        id?: number;
        message?: string;
        userId?: string;
    }): MessageBroadcasted {
        const message = new MessageBroadcasted({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.message != null) {
            message.message = data.message;
        }
        if (data.userId != null) {
            message.userId = data.userId;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            message?: string;
            userId?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.message != null) {
            data.message = this.message;
        }
        if (this.userId != null) {
            data.userId = this.userId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (this.message.length)
            writer.writeString(2, this.message);
        if (this.userId.length)
            writer.writeString(3, this.userId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageBroadcasted {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageBroadcasted();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                case 2:
                    message.message = reader.readString();
                    break;
                case 3:
                    message.userId = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MessageBroadcasted {
        return MessageBroadcasted.deserialize(bytes);
    }
}
export class FieldValueSetted extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        value?: string;
        userId?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("value" in data && data.value != undefined) {
                this.value = data.value;
            }
            if ("userId" in data && data.userId != undefined) {
                this.userId = data.userId;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get value() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set value(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get userId() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set userId(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        id?: number;
        value?: string;
        userId?: string;
    }): FieldValueSetted {
        const message = new FieldValueSetted({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.value != null) {
            message.value = data.value;
        }
        if (data.userId != null) {
            message.userId = data.userId;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            value?: string;
            userId?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.value != null) {
            data.value = this.value;
        }
        if (this.userId != null) {
            data.userId = this.userId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (this.value.length)
            writer.writeString(2, this.value);
        if (this.userId.length)
            writer.writeString(3, this.userId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FieldValueSetted {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FieldValueSetted();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                case 2:
                    message.value = reader.readString();
                    break;
                case 3:
                    message.userId = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FieldValueSetted {
        return FieldValueSetted.deserialize(bytes);
    }
}
export class ColliderUpdated extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        x?: number;
        y?: number;
        isBlocked?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("x" in data && data.x != undefined) {
                this.x = data.x;
            }
            if ("y" in data && data.y != undefined) {
                this.y = data.y;
            }
            if ("isBlocked" in data && data.isBlocked != undefined) {
                this.isBlocked = data.isBlocked;
            }
        }
    }
    get x() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set x(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get y() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set y(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get isBlocked() {
        return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
    }
    set isBlocked(value: boolean) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        x?: number;
        y?: number;
        isBlocked?: boolean;
    }): ColliderUpdated {
        const message = new ColliderUpdated({});
        if (data.x != null) {
            message.x = data.x;
        }
        if (data.y != null) {
            message.y = data.y;
        }
        if (data.isBlocked != null) {
            message.isBlocked = data.isBlocked;
        }
        return message;
    }
    toObject() {
        const data: {
            x?: number;
            y?: number;
            isBlocked?: boolean;
        } = {};
        if (this.x != null) {
            data.x = this.x;
        }
        if (this.y != null) {
            data.y = this.y;
        }
        if (this.isBlocked != null) {
            data.isBlocked = this.isBlocked;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.x != 0)
            writer.writeInt32(1, this.x);
        if (this.y != 0)
            writer.writeInt32(2, this.y);
        if (this.isBlocked != false)
            writer.writeBool(3, this.isBlocked);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ColliderUpdated {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ColliderUpdated();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.x = reader.readInt32();
                    break;
                case 2:
                    message.y = reader.readInt32();
                    break;
                case 3:
                    message.isBlocked = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ColliderUpdated {
        return ColliderUpdated.deserialize(bytes);
    }
}
export class GlobalPluginCreated extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        name?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        id?: number;
        name?: string;
    }): GlobalPluginCreated {
        const message = new GlobalPluginCreated({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            name?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (this.name.length)
            writer.writeString(2, this.name);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GlobalPluginCreated {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GlobalPluginCreated();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GlobalPluginCreated {
        return GlobalPluginCreated.deserialize(bytes);
    }
}
export class LocalPluginCreated extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        name?: string;
        iframeId?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("iframeId" in data && data.iframeId != undefined) {
                this.iframeId = data.iframeId;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get iframeId() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set iframeId(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        id?: number;
        name?: string;
        iframeId?: number;
    }): LocalPluginCreated {
        const message = new LocalPluginCreated({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.iframeId != null) {
            message.iframeId = data.iframeId;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            name?: string;
            iframeId?: number;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.iframeId != null) {
            data.iframeId = this.iframeId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (this.name.length)
            writer.writeString(2, this.name);
        if (this.iframeId != 0)
            writer.writeInt32(3, this.iframeId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LocalPluginCreated {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LocalPluginCreated();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.iframeId = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): LocalPluginCreated {
        return LocalPluginCreated.deserialize(bytes);
    }
}
export class PluginDeleted extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        id?: number;
    }): PluginDeleted {
        const message = new PluginDeleted({});
        if (data.id != null) {
            message.id = data.id;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PluginDeleted {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PluginDeleted();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PluginDeleted {
        return PluginDeleted.deserialize(bytes);
    }
}
export class PluginMessageSent extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        pluginId?: number;
        message?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("pluginId" in data && data.pluginId != undefined) {
                this.pluginId = data.pluginId;
            }
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
        }
    }
    get pluginId() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set pluginId(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        pluginId?: number;
        message?: string;
    }): PluginMessageSent {
        const message = new PluginMessageSent({});
        if (data.pluginId != null) {
            message.pluginId = data.pluginId;
        }
        if (data.message != null) {
            message.message = data.message;
        }
        return message;
    }
    toObject() {
        const data: {
            pluginId?: number;
            message?: string;
        } = {};
        if (this.pluginId != null) {
            data.pluginId = this.pluginId;
        }
        if (this.message != null) {
            data.message = this.message;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.pluginId != 0)
            writer.writeInt32(1, this.pluginId);
        if (this.message.length)
            writer.writeString(2, this.message);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PluginMessageSent {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PluginMessageSent();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.pluginId = reader.readInt32();
                    break;
                case 2:
                    message.message = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PluginMessageSent {
        return PluginMessageSent.deserialize(bytes);
    }
}
export class AboutPlugins extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        localPlugins?: AboutPlugins.LocalPlugin[];
        globalPlugins?: AboutPlugins.GlobalPlugin[];
        iframePluginPortMappings?: AboutPlugins.IframePluginPortMapping[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2, 3], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("localPlugins" in data && data.localPlugins != undefined) {
                this.localPlugins = data.localPlugins;
            }
            if ("globalPlugins" in data && data.globalPlugins != undefined) {
                this.globalPlugins = data.globalPlugins;
            }
            if ("iframePluginPortMappings" in data && data.iframePluginPortMappings != undefined) {
                this.iframePluginPortMappings = data.iframePluginPortMappings;
            }
        }
    }
    get localPlugins() {
        return pb_1.Message.getRepeatedWrapperField(this, AboutPlugins.LocalPlugin, 1) as AboutPlugins.LocalPlugin[];
    }
    set localPlugins(value: AboutPlugins.LocalPlugin[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    get globalPlugins() {
        return pb_1.Message.getRepeatedWrapperField(this, AboutPlugins.GlobalPlugin, 2) as AboutPlugins.GlobalPlugin[];
    }
    set globalPlugins(value: AboutPlugins.GlobalPlugin[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    get iframePluginPortMappings() {
        return pb_1.Message.getRepeatedWrapperField(this, AboutPlugins.IframePluginPortMapping, 3) as AboutPlugins.IframePluginPortMapping[];
    }
    set iframePluginPortMappings(value: AboutPlugins.IframePluginPortMapping[]) {
        pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    static fromObject(data: {
        localPlugins?: ReturnType<typeof AboutPlugins.LocalPlugin.prototype.toObject>[];
        globalPlugins?: ReturnType<typeof AboutPlugins.GlobalPlugin.prototype.toObject>[];
        iframePluginPortMappings?: ReturnType<typeof AboutPlugins.IframePluginPortMapping.prototype.toObject>[];
    }): AboutPlugins {
        const message = new AboutPlugins({});
        if (data.localPlugins != null) {
            message.localPlugins = data.localPlugins.map(item => AboutPlugins.LocalPlugin.fromObject(item));
        }
        if (data.globalPlugins != null) {
            message.globalPlugins = data.globalPlugins.map(item => AboutPlugins.GlobalPlugin.fromObject(item));
        }
        if (data.iframePluginPortMappings != null) {
            message.iframePluginPortMappings = data.iframePluginPortMappings.map(item => AboutPlugins.IframePluginPortMapping.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            localPlugins?: ReturnType<typeof AboutPlugins.LocalPlugin.prototype.toObject>[];
            globalPlugins?: ReturnType<typeof AboutPlugins.GlobalPlugin.prototype.toObject>[];
            iframePluginPortMappings?: ReturnType<typeof AboutPlugins.IframePluginPortMapping.prototype.toObject>[];
        } = {};
        if (this.localPlugins != null) {
            data.localPlugins = this.localPlugins.map((item: AboutPlugins.LocalPlugin) => item.toObject());
        }
        if (this.globalPlugins != null) {
            data.globalPlugins = this.globalPlugins.map((item: AboutPlugins.GlobalPlugin) => item.toObject());
        }
        if (this.iframePluginPortMappings != null) {
            data.iframePluginPortMappings = this.iframePluginPortMappings.map((item: AboutPlugins.IframePluginPortMapping) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.localPlugins.length)
            writer.writeRepeatedMessage(1, this.localPlugins, (item: AboutPlugins.LocalPlugin) => item.serialize(writer));
        if (this.globalPlugins.length)
            writer.writeRepeatedMessage(2, this.globalPlugins, (item: AboutPlugins.GlobalPlugin) => item.serialize(writer));
        if (this.iframePluginPortMappings.length)
            writer.writeRepeatedMessage(3, this.iframePluginPortMappings, (item: AboutPlugins.IframePluginPortMapping) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AboutPlugins {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AboutPlugins();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.localPlugins, () => pb_1.Message.addToRepeatedWrapperField(message, 1, AboutPlugins.LocalPlugin.deserialize(reader), AboutPlugins.LocalPlugin));
                    break;
                case 2:
                    reader.readMessage(message.globalPlugins, () => pb_1.Message.addToRepeatedWrapperField(message, 2, AboutPlugins.GlobalPlugin.deserialize(reader), AboutPlugins.GlobalPlugin));
                    break;
                case 3:
                    reader.readMessage(message.iframePluginPortMappings, () => pb_1.Message.addToRepeatedWrapperField(message, 3, AboutPlugins.IframePluginPortMapping.deserialize(reader), AboutPlugins.IframePluginPortMapping));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AboutPlugins {
        return AboutPlugins.deserialize(bytes);
    }
}
export namespace AboutPlugins {
    export class LocalPlugin extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            name?: string;
            iframeId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("iframeId" in data && data.iframeId != undefined) {
                    this.iframeId = data.iframeId;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get iframeId() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set iframeId(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            id?: number;
            name?: string;
            iframeId?: number;
        }): LocalPlugin {
            const message = new LocalPlugin({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.iframeId != null) {
                message.iframeId = data.iframeId;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
                iframeId?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.iframeId != null) {
                data.iframeId = this.iframeId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.iframeId != 0)
                writer.writeInt32(3, this.iframeId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LocalPlugin {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LocalPlugin();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.iframeId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LocalPlugin {
            return LocalPlugin.deserialize(bytes);
        }
    }
    export class GlobalPlugin extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: number;
            name?: string;
        }): GlobalPlugin {
            const message = new GlobalPlugin({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GlobalPlugin {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GlobalPlugin();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GlobalPlugin {
            return GlobalPlugin.deserialize(bytes);
        }
    }
    export class IframePluginPortMapping extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            iframeId?: number;
            pluginId?: number;
            id?: number;
            portId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("iframeId" in data && data.iframeId != undefined) {
                    this.iframeId = data.iframeId;
                }
                if ("pluginId" in data && data.pluginId != undefined) {
                    this.pluginId = data.pluginId;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("portId" in data && data.portId != undefined) {
                    this.portId = data.portId;
                }
            }
        }
        get iframeId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set iframeId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get pluginId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set pluginId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get portId() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set portId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            iframeId?: number;
            pluginId?: number;
            id?: number;
            portId?: string;
        }): IframePluginPortMapping {
            const message = new IframePluginPortMapping({});
            if (data.iframeId != null) {
                message.iframeId = data.iframeId;
            }
            if (data.pluginId != null) {
                message.pluginId = data.pluginId;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.portId != null) {
                message.portId = data.portId;
            }
            return message;
        }
        toObject() {
            const data: {
                iframeId?: number;
                pluginId?: number;
                id?: number;
                portId?: string;
            } = {};
            if (this.iframeId != null) {
                data.iframeId = this.iframeId;
            }
            if (this.pluginId != null) {
                data.pluginId = this.pluginId;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.portId != null) {
                data.portId = this.portId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.iframeId != 0)
                writer.writeInt32(1, this.iframeId);
            if (this.pluginId != 0)
                writer.writeInt32(2, this.pluginId);
            if (this.id != 0)
                writer.writeInt32(3, this.id);
            if (this.portId.length)
                writer.writeString(4, this.portId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IframePluginPortMapping {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IframePluginPortMapping();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.iframeId = reader.readInt32();
                        break;
                    case 2:
                        message.pluginId = reader.readInt32();
                        break;
                    case 3:
                        message.id = reader.readInt32();
                        break;
                    case 4:
                        message.portId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IframePluginPortMapping {
            return IframePluginPortMapping.deserialize(bytes);
        }
    }
}
export class IframePluginPortMappingCreated extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        portId?: string;
        iframeId?: number;
        pluginId?: number;
        id?: number;
        pluginName?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("portId" in data && data.portId != undefined) {
                this.portId = data.portId;
            }
            if ("iframeId" in data && data.iframeId != undefined) {
                this.iframeId = data.iframeId;
            }
            if ("pluginId" in data && data.pluginId != undefined) {
                this.pluginId = data.pluginId;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("pluginName" in data && data.pluginName != undefined) {
                this.pluginName = data.pluginName;
            }
        }
    }
    get portId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set portId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get iframeId() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set iframeId(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get pluginId() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set pluginId(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get pluginName() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set pluginName(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        portId?: string;
        iframeId?: number;
        pluginId?: number;
        id?: number;
        pluginName?: string;
    }): IframePluginPortMappingCreated {
        const message = new IframePluginPortMappingCreated({});
        if (data.portId != null) {
            message.portId = data.portId;
        }
        if (data.iframeId != null) {
            message.iframeId = data.iframeId;
        }
        if (data.pluginId != null) {
            message.pluginId = data.pluginId;
        }
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.pluginName != null) {
            message.pluginName = data.pluginName;
        }
        return message;
    }
    toObject() {
        const data: {
            portId?: string;
            iframeId?: number;
            pluginId?: number;
            id?: number;
            pluginName?: string;
        } = {};
        if (this.portId != null) {
            data.portId = this.portId;
        }
        if (this.iframeId != null) {
            data.iframeId = this.iframeId;
        }
        if (this.pluginId != null) {
            data.pluginId = this.pluginId;
        }
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.pluginName != null) {
            data.pluginName = this.pluginName;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.portId.length)
            writer.writeString(1, this.portId);
        if (this.iframeId != 0)
            writer.writeInt32(2, this.iframeId);
        if (this.pluginId != 0)
            writer.writeInt32(3, this.pluginId);
        if (this.id != 0)
            writer.writeInt32(4, this.id);
        if (this.pluginName.length)
            writer.writeString(5, this.pluginName);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IframePluginPortMappingCreated {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IframePluginPortMappingCreated();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.portId = reader.readString();
                    break;
                case 2:
                    message.iframeId = reader.readInt32();
                    break;
                case 3:
                    message.pluginId = reader.readInt32();
                    break;
                case 4:
                    message.id = reader.readInt32();
                    break;
                case 5:
                    message.pluginName = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): IframePluginPortMappingCreated {
        return IframePluginPortMappingCreated.deserialize(bytes);
    }
}
export class IframePluginPortMappingDeleted extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        iframeId?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("iframeId" in data && data.iframeId != undefined) {
                this.iframeId = data.iframeId;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get iframeId() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set iframeId(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        id?: number;
        iframeId?: number;
    }): IframePluginPortMappingDeleted {
        const message = new IframePluginPortMappingDeleted({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.iframeId != null) {
            message.iframeId = data.iframeId;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            iframeId?: number;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.iframeId != null) {
            data.iframeId = this.iframeId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (this.iframeId != 0)
            writer.writeInt32(2, this.iframeId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IframePluginPortMappingDeleted {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IframePluginPortMappingDeleted();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                case 2:
                    message.iframeId = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): IframePluginPortMappingDeleted {
        return IframePluginPortMappingDeleted.deserialize(bytes);
    }
}
export class AtlasTileCreated extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        x?: number;
        y?: number;
        type?: number;
        atlas?: Atlas;
        atlasIndex?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("x" in data && data.x != undefined) {
                this.x = data.x;
            }
            if ("y" in data && data.y != undefined) {
                this.y = data.y;
            }
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("atlas" in data && data.atlas != undefined) {
                this.atlas = data.atlas;
            }
            if ("atlasIndex" in data && data.atlasIndex != undefined) {
                this.atlasIndex = data.atlasIndex;
            }
        }
    }
    get x() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set x(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get y() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set y(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set type(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get atlas() {
        return pb_1.Message.getWrapperField(this, Atlas, 4) as Atlas;
    }
    set atlas(value: Atlas) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_atlas() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get atlasIndex() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set atlasIndex(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        x?: number;
        y?: number;
        type?: number;
        atlas?: ReturnType<typeof Atlas.prototype.toObject>;
        atlasIndex?: number;
    }): AtlasTileCreated {
        const message = new AtlasTileCreated({});
        if (data.x != null) {
            message.x = data.x;
        }
        if (data.y != null) {
            message.y = data.y;
        }
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.atlas != null) {
            message.atlas = Atlas.fromObject(data.atlas);
        }
        if (data.atlasIndex != null) {
            message.atlasIndex = data.atlasIndex;
        }
        return message;
    }
    toObject() {
        const data: {
            x?: number;
            y?: number;
            type?: number;
            atlas?: ReturnType<typeof Atlas.prototype.toObject>;
            atlasIndex?: number;
        } = {};
        if (this.x != null) {
            data.x = this.x;
        }
        if (this.y != null) {
            data.y = this.y;
        }
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.atlas != null) {
            data.atlas = this.atlas.toObject();
        }
        if (this.atlasIndex != null) {
            data.atlasIndex = this.atlasIndex;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.x != 0)
            writer.writeInt32(1, this.x);
        if (this.y != 0)
            writer.writeInt32(2, this.y);
        if (this.type != 0)
            writer.writeInt32(3, this.type);
        if (this.has_atlas)
            writer.writeMessage(4, this.atlas, () => this.atlas.serialize(writer));
        if (this.atlasIndex != 0)
            writer.writeInt32(5, this.atlasIndex);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AtlasTileCreated {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AtlasTileCreated();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.x = reader.readInt32();
                    break;
                case 2:
                    message.y = reader.readInt32();
                    break;
                case 3:
                    message.type = reader.readInt32();
                    break;
                case 4:
                    reader.readMessage(message.atlas, () => message.atlas = Atlas.deserialize(reader));
                    break;
                case 5:
                    message.atlasIndex = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AtlasTileCreated {
        return AtlasTileCreated.deserialize(bytes);
    }
}
export class AtlasTileUpdated extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        x?: number;
        y?: number;
        type?: number;
        atlas?: Atlas;
        atlasIndex?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("x" in data && data.x != undefined) {
                this.x = data.x;
            }
            if ("y" in data && data.y != undefined) {
                this.y = data.y;
            }
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("atlas" in data && data.atlas != undefined) {
                this.atlas = data.atlas;
            }
            if ("atlasIndex" in data && data.atlasIndex != undefined) {
                this.atlasIndex = data.atlasIndex;
            }
        }
    }
    get x() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set x(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get y() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set y(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set type(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get atlas() {
        return pb_1.Message.getWrapperField(this, Atlas, 4) as Atlas;
    }
    set atlas(value: Atlas) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_atlas() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get atlasIndex() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set atlasIndex(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        x?: number;
        y?: number;
        type?: number;
        atlas?: ReturnType<typeof Atlas.prototype.toObject>;
        atlasIndex?: number;
    }): AtlasTileUpdated {
        const message = new AtlasTileUpdated({});
        if (data.x != null) {
            message.x = data.x;
        }
        if (data.y != null) {
            message.y = data.y;
        }
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.atlas != null) {
            message.atlas = Atlas.fromObject(data.atlas);
        }
        if (data.atlasIndex != null) {
            message.atlasIndex = data.atlasIndex;
        }
        return message;
    }
    toObject() {
        const data: {
            x?: number;
            y?: number;
            type?: number;
            atlas?: ReturnType<typeof Atlas.prototype.toObject>;
            atlasIndex?: number;
        } = {};
        if (this.x != null) {
            data.x = this.x;
        }
        if (this.y != null) {
            data.y = this.y;
        }
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.atlas != null) {
            data.atlas = this.atlas.toObject();
        }
        if (this.atlasIndex != null) {
            data.atlasIndex = this.atlasIndex;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.x != 0)
            writer.writeInt32(1, this.x);
        if (this.y != 0)
            writer.writeInt32(2, this.y);
        if (this.type != 0)
            writer.writeInt32(3, this.type);
        if (this.has_atlas)
            writer.writeMessage(4, this.atlas, () => this.atlas.serialize(writer));
        if (this.atlasIndex != 0)
            writer.writeInt32(5, this.atlasIndex);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AtlasTileUpdated {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AtlasTileUpdated();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.x = reader.readInt32();
                    break;
                case 2:
                    message.y = reader.readInt32();
                    break;
                case 3:
                    message.type = reader.readInt32();
                    break;
                case 4:
                    reader.readMessage(message.atlas, () => message.atlas = Atlas.deserialize(reader));
                    break;
                case 5:
                    message.atlasIndex = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AtlasTileUpdated {
        return AtlasTileUpdated.deserialize(bytes);
    }
}
export class AtlasTileDeleted extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        x?: number;
        y?: number;
        type?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("x" in data && data.x != undefined) {
                this.x = data.x;
            }
            if ("y" in data && data.y != undefined) {
                this.y = data.y;
            }
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
        }
    }
    get x() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set x(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get y() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set y(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set type(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        x?: number;
        y?: number;
        type?: number;
    }): AtlasTileDeleted {
        const message = new AtlasTileDeleted({});
        if (data.x != null) {
            message.x = data.x;
        }
        if (data.y != null) {
            message.y = data.y;
        }
        if (data.type != null) {
            message.type = data.type;
        }
        return message;
    }
    toObject() {
        const data: {
            x?: number;
            y?: number;
            type?: number;
        } = {};
        if (this.x != null) {
            data.x = this.x;
        }
        if (this.y != null) {
            data.y = this.y;
        }
        if (this.type != null) {
            data.type = this.type;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.x != 0)
            writer.writeInt32(1, this.x);
        if (this.y != 0)
            writer.writeInt32(2, this.y);
        if (this.type != 0)
            writer.writeInt32(3, this.type);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AtlasTileDeleted {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AtlasTileDeleted();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.x = reader.readInt32();
                    break;
                case 2:
                    message.y = reader.readInt32();
                    break;
                case 3:
                    message.type = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AtlasTileDeleted {
        return AtlasTileDeleted.deserialize(bytes);
    }
}
export class Atlas extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
        columnCount?: number;
        rowCount?: number;
        src?: string;
        id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("columnCount" in data && data.columnCount != undefined) {
                this.columnCount = data.columnCount;
            }
            if ("rowCount" in data && data.rowCount != undefined) {
                this.rowCount = data.rowCount;
            }
            if ("src" in data && data.src != undefined) {
                this.src = data.src;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get columnCount() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set columnCount(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get rowCount() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set rowCount(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get src() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set src(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        name?: string;
        columnCount?: number;
        rowCount?: number;
        src?: string;
        id?: number;
    }): Atlas {
        const message = new Atlas({});
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.columnCount != null) {
            message.columnCount = data.columnCount;
        }
        if (data.rowCount != null) {
            message.rowCount = data.rowCount;
        }
        if (data.src != null) {
            message.src = data.src;
        }
        if (data.id != null) {
            message.id = data.id;
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
            columnCount?: number;
            rowCount?: number;
            src?: string;
            id?: number;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.columnCount != null) {
            data.columnCount = this.columnCount;
        }
        if (this.rowCount != null) {
            data.rowCount = this.rowCount;
        }
        if (this.src != null) {
            data.src = this.src;
        }
        if (this.id != null) {
            data.id = this.id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (this.columnCount != 0)
            writer.writeInt32(2, this.columnCount);
        if (this.rowCount != 0)
            writer.writeInt32(3, this.rowCount);
        if (this.src.length)
            writer.writeString(4, this.src);
        if (this.id != 0)
            writer.writeInt32(5, this.id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Atlas {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Atlas();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    message.columnCount = reader.readInt32();
                    break;
                case 3:
                    message.rowCount = reader.readInt32();
                    break;
                case 4:
                    message.src = reader.readString();
                    break;
                case 5:
                    message.id = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Atlas {
        return Atlas.deserialize(bytes);
    }
}
export class IframeGameObjectCreated extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        x?: number;
        y?: number;
        iframeGameObjectProto?: IframeGameObjectCreated.IframeGameObjectProto;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("x" in data && data.x != undefined) {
                this.x = data.x;
            }
            if ("y" in data && data.y != undefined) {
                this.y = data.y;
            }
            if ("iframeGameObjectProto" in data && data.iframeGameObjectProto != undefined) {
                this.iframeGameObjectProto = data.iframeGameObjectProto;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get x() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set x(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get y() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set y(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get iframeGameObjectProto() {
        return pb_1.Message.getWrapperField(this, IframeGameObjectCreated.IframeGameObjectProto, 4) as IframeGameObjectCreated.IframeGameObjectProto;
    }
    set iframeGameObjectProto(value: IframeGameObjectCreated.IframeGameObjectProto) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_iframeGameObjectProto() {
        return pb_1.Message.getField(this, 4) != null;
    }
    static fromObject(data: {
        id?: number;
        x?: number;
        y?: number;
        iframeGameObjectProto?: ReturnType<typeof IframeGameObjectCreated.IframeGameObjectProto.prototype.toObject>;
    }): IframeGameObjectCreated {
        const message = new IframeGameObjectCreated({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.x != null) {
            message.x = data.x;
        }
        if (data.y != null) {
            message.y = data.y;
        }
        if (data.iframeGameObjectProto != null) {
            message.iframeGameObjectProto = IframeGameObjectCreated.IframeGameObjectProto.fromObject(data.iframeGameObjectProto);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            x?: number;
            y?: number;
            iframeGameObjectProto?: ReturnType<typeof IframeGameObjectCreated.IframeGameObjectProto.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.x != null) {
            data.x = this.x;
        }
        if (this.y != null) {
            data.y = this.y;
        }
        if (this.iframeGameObjectProto != null) {
            data.iframeGameObjectProto = this.iframeGameObjectProto.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (this.x != 0)
            writer.writeInt32(2, this.x);
        if (this.y != 0)
            writer.writeInt32(3, this.y);
        if (this.has_iframeGameObjectProto)
            writer.writeMessage(4, this.iframeGameObjectProto, () => this.iframeGameObjectProto.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IframeGameObjectCreated {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IframeGameObjectCreated();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                case 2:
                    message.x = reader.readInt32();
                    break;
                case 3:
                    message.y = reader.readInt32();
                    break;
                case 4:
                    reader.readMessage(message.iframeGameObjectProto, () => message.iframeGameObjectProto = IframeGameObjectCreated.IframeGameObjectProto.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): IframeGameObjectCreated {
        return IframeGameObjectCreated.deserialize(bytes);
    }
}
export namespace IframeGameObjectCreated {
    export class IframeGameObjectProto extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            width?: number;
            height?: number;
            offsetX?: number;
            offsetY?: number;
            isPublic?: boolean;
            type?: number;
            src?: string;
            id?: number;
            ownerId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("width" in data && data.width != undefined) {
                    this.width = data.width;
                }
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("offsetX" in data && data.offsetX != undefined) {
                    this.offsetX = data.offsetX;
                }
                if ("offsetY" in data && data.offsetY != undefined) {
                    this.offsetY = data.offsetY;
                }
                if ("isPublic" in data && data.isPublic != undefined) {
                    this.isPublic = data.isPublic;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("src" in data && data.src != undefined) {
                    this.src = data.src;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("ownerId" in data && data.ownerId != undefined) {
                    this.ownerId = data.ownerId;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get width() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set width(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get offsetX() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set offsetX(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get offsetY() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set offsetY(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get isPublic() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set isPublic(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set type(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get src() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set src(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get ownerId() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set ownerId(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            name?: string;
            width?: number;
            height?: number;
            offsetX?: number;
            offsetY?: number;
            isPublic?: boolean;
            type?: number;
            src?: string;
            id?: number;
            ownerId?: string;
        }): IframeGameObjectProto {
            const message = new IframeGameObjectProto({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.width != null) {
                message.width = data.width;
            }
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.offsetX != null) {
                message.offsetX = data.offsetX;
            }
            if (data.offsetY != null) {
                message.offsetY = data.offsetY;
            }
            if (data.isPublic != null) {
                message.isPublic = data.isPublic;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.src != null) {
                message.src = data.src;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.ownerId != null) {
                message.ownerId = data.ownerId;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                width?: number;
                height?: number;
                offsetX?: number;
                offsetY?: number;
                isPublic?: boolean;
                type?: number;
                src?: string;
                id?: number;
                ownerId?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.width != null) {
                data.width = this.width;
            }
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.offsetX != null) {
                data.offsetX = this.offsetX;
            }
            if (this.offsetY != null) {
                data.offsetY = this.offsetY;
            }
            if (this.isPublic != null) {
                data.isPublic = this.isPublic;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.src != null) {
                data.src = this.src;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.ownerId != null) {
                data.ownerId = this.ownerId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.width != 0)
                writer.writeInt32(2, this.width);
            if (this.height != 0)
                writer.writeInt32(3, this.height);
            if (this.offsetX != 0)
                writer.writeInt32(4, this.offsetX);
            if (this.offsetY != 0)
                writer.writeInt32(5, this.offsetY);
            if (this.isPublic != false)
                writer.writeBool(6, this.isPublic);
            if (this.type != 0)
                writer.writeInt32(7, this.type);
            if (this.src.length)
                writer.writeString(8, this.src);
            if (this.id != 0)
                writer.writeInt32(9, this.id);
            if (this.ownerId.length)
                writer.writeString(10, this.ownerId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IframeGameObjectProto {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IframeGameObjectProto();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.width = reader.readInt32();
                        break;
                    case 3:
                        message.height = reader.readInt32();
                        break;
                    case 4:
                        message.offsetX = reader.readInt32();
                        break;
                    case 5:
                        message.offsetY = reader.readInt32();
                        break;
                    case 6:
                        message.isPublic = reader.readBool();
                        break;
                    case 7:
                        message.type = reader.readInt32();
                        break;
                    case 8:
                        message.src = reader.readString();
                        break;
                    case 9:
                        message.id = reader.readInt32();
                        break;
                    case 10:
                        message.ownerId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IframeGameObjectProto {
            return IframeGameObjectProto.deserialize(bytes);
        }
    }
}
export class IframeGameObjectDeleted extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        id?: number;
    }): IframeGameObjectDeleted {
        const message = new IframeGameObjectDeleted({});
        if (data.id != null) {
            message.id = data.id;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IframeGameObjectDeleted {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IframeGameObjectDeleted();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): IframeGameObjectDeleted {
        return IframeGameObjectDeleted.deserialize(bytes);
    }
}
export class ResIsPluginOutdated extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        isOutdateds?: boolean[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("isOutdateds" in data && data.isOutdateds != undefined) {
                this.isOutdateds = data.isOutdateds;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get isOutdateds() {
        return pb_1.Message.getFieldWithDefault(this, 2, []) as boolean[];
    }
    set isOutdateds(value: boolean[]) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        id?: number;
        isOutdateds?: boolean[];
    }): ResIsPluginOutdated {
        const message = new ResIsPluginOutdated({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.isOutdateds != null) {
            message.isOutdateds = data.isOutdateds;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            isOutdateds?: boolean[];
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.isOutdateds != null) {
            data.isOutdateds = this.isOutdateds;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (this.isOutdateds.length)
            writer.writePackedBool(2, this.isOutdateds);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResIsPluginOutdated {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResIsPluginOutdated();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                case 2:
                    message.isOutdateds = reader.readPackedBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ResIsPluginOutdated {
        return ResIsPluginOutdated.deserialize(bytes);
    }
}
